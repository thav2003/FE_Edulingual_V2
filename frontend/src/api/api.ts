/* tslint:disable */
/* eslint-disable */
/**
 * Edulingual API
 * Edulingual API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Answer
 */
export interface Answer {
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Answer
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    'content'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Answer
     */
    'isCorrect'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    'questionId'?: string;
    /**
     * 
     * @type {Question}
     * @memberof Answer
     */
    'question'?: Question;
}
/**
 * 
 * @export
 * @interface BooleanIPaginate
 */
export interface BooleanIPaginate {
    /**
     * 
     * @type {number}
     * @memberof BooleanIPaginate
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof BooleanIPaginate
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof BooleanIPaginate
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof BooleanIPaginate
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<boolean>}
     * @memberof BooleanIPaginate
     */
    'items'?: Array<boolean> | null;
}
/**
 * 
 * @export
 * @interface BooleanPagingResult
 */
export interface BooleanPagingResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof BooleanPagingResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof BooleanPagingResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {BooleanIPaginate}
     * @memberof BooleanPagingResult
     */
    'data'?: BooleanIPaginate;
    /**
     * 
     * @type {number}
     * @memberof BooleanPagingResult
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof BooleanPagingResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof BooleanPagingResult
     */
    'totalCount'?: number;
}


/**
 * 
 * @export
 * @interface BooleanResult
 */
export interface BooleanResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof BooleanResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof BooleanResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BooleanResult
     */
    'data'?: boolean;
}


/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Course
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'duration'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    'tuitionfee'?: number;
    /**
     * 
     * @type {CourseStatus}
     * @memberof Course
     */
    'status'?: CourseStatus;
    /**
     * 
     * @type {boolean}
     * @memberof Course
     */
    'isHighlighted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'courseAreaId'?: string;
    /**
     * 
     * @type {CourseArea}
     * @memberof Course
     */
    'courseArea'?: CourseArea;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'courseLanguageId'?: string;
    /**
     * 
     * @type {CourseLanguage}
     * @memberof Course
     */
    'courseLanguage'?: CourseLanguage;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'courseCategoryId'?: string;
    /**
     * 
     * @type {CourseCategory}
     * @memberof Course
     */
    'courseCategory'?: CourseCategory;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'centerId'?: string;
    /**
     * 
     * @type {User}
     * @memberof Course
     */
    'center'?: User;
    /**
     * 
     * @type {Array<Feedback>}
     * @memberof Course
     */
    'feedbacks'?: Array<Feedback> | null;
    /**
     * 
     * @type {Array<CourseFeedback>}
     * @memberof Course
     */
    'courseFeedbacks'?: Array<CourseFeedback> | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof Course
     */
    'users'?: Array<User> | null;
    /**
     * 
     * @type {Array<UserCourse>}
     * @memberof Course
     */
    'userCourses'?: Array<UserCourse> | null;
    /**
     * 
     * @type {Array<Payment>}
     * @memberof Course
     */
    'payments'?: Array<Payment> | null;
    /**
     * 
     * @type {Array<Exam>}
     * @memberof Course
     */
    'exams'?: Array<Exam> | null;
}


/**
 * 
 * @export
 * @interface CourseArea
 */
export interface CourseArea {
    /**
     * 
     * @type {string}
     * @memberof CourseArea
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseArea
     */
    'name': string;
    /**
     * 
     * @type {CourseAreaStatus}
     * @memberof CourseArea
     */
    'status'?: CourseAreaStatus;
    /**
     * 
     * @type {Array<Course>}
     * @memberof CourseArea
     */
    'courses'?: Array<Course> | null;
}


/**
 * 
 * @export
 * @interface CourseAreaDto
 */
export interface CourseAreaDto {
    /**
     * 
     * @type {string}
     * @memberof CourseAreaDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaDto
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaDto
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseAreaDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {CourseAreaStatus}
     * @memberof CourseAreaDto
     */
    'status'?: CourseAreaStatus;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CourseAreaStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type CourseAreaStatus = typeof CourseAreaStatus[keyof typeof CourseAreaStatus];


/**
 * 
 * @export
 * @interface CourseAreaViewModel
 */
export interface CourseAreaViewModel {
    /**
     * 
     * @type {string}
     * @memberof CourseAreaViewModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaViewModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaViewModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaViewModel
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaViewModel
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseAreaViewModel
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaViewModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {CourseAreaStatus}
     * @memberof CourseAreaViewModel
     */
    'status'?: CourseAreaStatus;
}


/**
 * 
 * @export
 * @interface CourseAreaViewModelListResult
 */
export interface CourseAreaViewModelListResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseAreaViewModelListResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaViewModelListResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<CourseAreaViewModel>}
     * @memberof CourseAreaViewModelListResult
     */
    'data'?: Array<CourseAreaViewModel> | null;
}


/**
 * 
 * @export
 * @interface CourseAreaViewModelResult
 */
export interface CourseAreaViewModelResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseAreaViewModelResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseAreaViewModelResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {CourseAreaViewModel}
     * @memberof CourseAreaViewModelResult
     */
    'data'?: CourseAreaViewModel;
}


/**
 * 
 * @export
 * @interface CourseByUserDto
 */
export interface CourseByUserDto {
    /**
     * 
     * @type {string}
     * @memberof CourseByUserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseByUserDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseByUserDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseByUserDto
     */
    'duration'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CourseByUserDto
     */
    'tuitionfee'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseByUserDto
     */
    'centerName'?: string | null;
}
/**
 * 
 * @export
 * @interface CourseByUserDtoIPaginate
 */
export interface CourseByUserDtoIPaginate {
    /**
     * 
     * @type {number}
     * @memberof CourseByUserDtoIPaginate
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseByUserDtoIPaginate
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseByUserDtoIPaginate
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseByUserDtoIPaginate
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<CourseByUserDto>}
     * @memberof CourseByUserDtoIPaginate
     */
    'items'?: Array<CourseByUserDto> | null;
}
/**
 * 
 * @export
 * @interface CourseByUserDtoPagingResult
 */
export interface CourseByUserDtoPagingResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseByUserDtoPagingResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseByUserDtoPagingResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {CourseByUserDtoIPaginate}
     * @memberof CourseByUserDtoPagingResult
     */
    'data'?: CourseByUserDtoIPaginate;
    /**
     * 
     * @type {number}
     * @memberof CourseByUserDtoPagingResult
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseByUserDtoPagingResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseByUserDtoPagingResult
     */
    'totalCount'?: number;
}


/**
 * 
 * @export
 * @interface CourseCategory
 */
export interface CourseCategory {
    /**
     * 
     * @type {string}
     * @memberof CourseCategory
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCategory
     */
    'name': string;
    /**
     * 
     * @type {CourseCategoryStatus}
     * @memberof CourseCategory
     */
    'status'?: CourseCategoryStatus;
    /**
     * 
     * @type {string}
     * @memberof CourseCategory
     */
    'languageId'?: string;
    /**
     * 
     * @type {CourseLanguage}
     * @memberof CourseCategory
     */
    'courseLanguage'?: CourseLanguage;
    /**
     * 
     * @type {Array<Course>}
     * @memberof CourseCategory
     */
    'courses'?: Array<Course> | null;
}


/**
 * 
 * @export
 * @interface CourseCategoryDto
 */
export interface CourseCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryDto
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryDto
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseCategoryDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {CourseCategoryStatus}
     * @memberof CourseCategoryDto
     */
    'status'?: CourseCategoryStatus;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CourseCategoryStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type CourseCategoryStatus = typeof CourseCategoryStatus[keyof typeof CourseCategoryStatus];


/**
 * 
 * @export
 * @interface CourseCategoryViewModel
 */
export interface CourseCategoryViewModel {
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryViewModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryViewModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryViewModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryViewModel
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryViewModel
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseCategoryViewModel
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryViewModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {CourseCategoryStatus}
     * @memberof CourseCategoryViewModel
     */
    'status'?: CourseCategoryStatus;
    /**
     * 
     * @type {CourseLanguageDto}
     * @memberof CourseCategoryViewModel
     */
    'courseLanguage'?: CourseLanguageDto;
}


/**
 * 
 * @export
 * @interface CourseCategoryViewModelListResult
 */
export interface CourseCategoryViewModelListResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseCategoryViewModelListResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryViewModelListResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<CourseCategoryViewModel>}
     * @memberof CourseCategoryViewModelListResult
     */
    'data'?: Array<CourseCategoryViewModel> | null;
}


/**
 * 
 * @export
 * @interface CourseCategoryViewModelResult
 */
export interface CourseCategoryViewModelResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseCategoryViewModelResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseCategoryViewModelResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {CourseCategoryViewModel}
     * @memberof CourseCategoryViewModelResult
     */
    'data'?: CourseCategoryViewModel;
}


/**
 * 
 * @export
 * @interface CourseFeedback
 */
export interface CourseFeedback {
    /**
     * 
     * @type {string}
     * @memberof CourseFeedback
     */
    'courseId'?: string;
    /**
     * 
     * @type {Course}
     * @memberof CourseFeedback
     */
    'course'?: Course;
    /**
     * 
     * @type {string}
     * @memberof CourseFeedback
     */
    'feedbackId'?: string;
    /**
     * 
     * @type {Feedback}
     * @memberof CourseFeedback
     */
    'feedback'?: Feedback;
}
/**
 * 
 * @export
 * @interface CourseLanguage
 */
export interface CourseLanguage {
    /**
     * 
     * @type {string}
     * @memberof CourseLanguage
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguage
     */
    'name': string;
    /**
     * 
     * @type {CourseLanguageStatus}
     * @memberof CourseLanguage
     */
    'status'?: CourseLanguageStatus;
    /**
     * 
     * @type {Array<Course>}
     * @memberof CourseLanguage
     */
    'courses'?: Array<Course> | null;
    /**
     * 
     * @type {Array<CourseCategory>}
     * @memberof CourseLanguage
     */
    'courseCategories'?: Array<CourseCategory> | null;
}


/**
 * 
 * @export
 * @interface CourseLanguageDto
 */
export interface CourseLanguageDto {
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageDto
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageDto
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseLanguageDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {CourseLanguageStatus}
     * @memberof CourseLanguageDto
     */
    'status'?: CourseLanguageStatus;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CourseLanguageStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type CourseLanguageStatus = typeof CourseLanguageStatus[keyof typeof CourseLanguageStatus];


/**
 * 
 * @export
 * @interface CourseLanguageViewModel
 */
export interface CourseLanguageViewModel {
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageViewModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageViewModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageViewModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageViewModel
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageViewModel
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseLanguageViewModel
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageViewModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {CourseLanguageStatus}
     * @memberof CourseLanguageViewModel
     */
    'status'?: CourseLanguageStatus;
}


/**
 * 
 * @export
 * @interface CourseLanguageViewModelListResult
 */
export interface CourseLanguageViewModelListResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseLanguageViewModelListResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageViewModelListResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<CourseLanguageViewModel>}
     * @memberof CourseLanguageViewModelListResult
     */
    'data'?: Array<CourseLanguageViewModel> | null;
}


/**
 * 
 * @export
 * @interface CourseLanguageViewModelResult
 */
export interface CourseLanguageViewModelResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseLanguageViewModelResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseLanguageViewModelResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {CourseLanguageViewModel}
     * @memberof CourseLanguageViewModelResult
     */
    'data'?: CourseLanguageViewModel;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CourseStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type CourseStatus = typeof CourseStatus[keyof typeof CourseStatus];


/**
 * 
 * @export
 * @interface CourseViewModel
 */
export interface CourseViewModel {
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseViewModel
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    'duration'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CourseViewModel
     */
    'tuitionfee'?: number;
    /**
     * 
     * @type {CourseStatus}
     * @memberof CourseViewModel
     */
    'status'?: CourseStatus;
    /**
     * 
     * @type {boolean}
     * @memberof CourseViewModel
     */
    'isHighlighted'?: boolean;
    /**
     * 
     * @type {CourseAreaDto}
     * @memberof CourseViewModel
     */
    'courseArea'?: CourseAreaDto;
    /**
     * 
     * @type {CourseLanguageDto}
     * @memberof CourseViewModel
     */
    'courseLanguage'?: CourseLanguageDto;
    /**
     * 
     * @type {CourseCategoryDto}
     * @memberof CourseViewModel
     */
    'courseCategory'?: CourseCategoryDto;
    /**
     * 
     * @type {UserDto}
     * @memberof CourseViewModel
     */
    'center'?: UserDto;
}


/**
 * 
 * @export
 * @interface CourseViewModelIPaginate
 */
export interface CourseViewModelIPaginate {
    /**
     * 
     * @type {number}
     * @memberof CourseViewModelIPaginate
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseViewModelIPaginate
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseViewModelIPaginate
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseViewModelIPaginate
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<CourseViewModel>}
     * @memberof CourseViewModelIPaginate
     */
    'items'?: Array<CourseViewModel> | null;
}
/**
 * 
 * @export
 * @interface CourseViewModelListResult
 */
export interface CourseViewModelListResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseViewModelListResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModelListResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<CourseViewModel>}
     * @memberof CourseViewModelListResult
     */
    'data'?: Array<CourseViewModel> | null;
}


/**
 * 
 * @export
 * @interface CourseViewModelPagingResult
 */
export interface CourseViewModelPagingResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseViewModelPagingResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModelPagingResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {CourseViewModelIPaginate}
     * @memberof CourseViewModelPagingResult
     */
    'data'?: CourseViewModelIPaginate;
    /**
     * 
     * @type {number}
     * @memberof CourseViewModelPagingResult
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseViewModelPagingResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseViewModelPagingResult
     */
    'totalCount'?: number;
}


/**
 * 
 * @export
 * @interface CourseViewModelResult
 */
export interface CourseViewModelResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CourseViewModelResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModelResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {CourseViewModel}
     * @memberof CourseViewModelResult
     */
    'data'?: CourseViewModel;
}


/**
 * 
 * @export
 * @interface CreateCourseAreaRequest
 */
export interface CreateCourseAreaRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCourseAreaRequest
     */
    'name': string;
    /**
     * 
     * @type {CourseAreaStatus}
     * @memberof CreateCourseAreaRequest
     */
    'status'?: CourseAreaStatus;
}


/**
 * 
 * @export
 * @interface CreateCourseCategoryRequest
 */
export interface CreateCourseCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCourseCategoryRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseCategoryRequest
     */
    'languageId': string;
    /**
     * 
     * @type {CourseCategoryStatus}
     * @memberof CreateCourseCategoryRequest
     */
    'status'?: CourseCategoryStatus;
}


/**
 * 
 * @export
 * @interface CreateCourseLanguageRequest
 */
export interface CreateCourseLanguageRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCourseLanguageRequest
     */
    'name': string;
    /**
     * 
     * @type {CourseLanguageStatus}
     * @memberof CreateCourseLanguageRequest
     */
    'status'?: CourseLanguageStatus;
}


/**
 * 
 * @export
 * @interface CreateCourseRequest
 */
export interface CreateCourseRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'duration': string;
    /**
     * 
     * @type {number}
     * @memberof CreateCourseRequest
     */
    'tuitionfee': number;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'centerId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'courseAreaId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'courseLanguageId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'courseCategoryId': string;
}
/**
 * 
 * @export
 * @interface CreateFeedbackRequest
 */
export interface CreateFeedbackRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateFeedbackRequest
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof CreateFeedbackRequest
     */
    'rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateFeedbackRequest
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {UserStatus}
     * @memberof CreateUserRequest
     */
    'userStatus'?: UserStatus;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'roleId': string;
}


/**
 * 
 * @export
 * @interface Exam
 */
export interface Exam {
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Exam
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'centerId'?: string;
    /**
     * 
     * @type {User}
     * @memberof Exam
     */
    'center'?: User;
    /**
     * 
     * @type {number}
     * @memberof Exam
     */
    'totalQuestion'?: number;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'courseId'?: string;
    /**
     * 
     * @type {Course}
     * @memberof Exam
     */
    'course'?: Course;
    /**
     * 
     * @type {Array<Question>}
     * @memberof Exam
     */
    'questions'?: Array<Question> | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof Exam
     */
    'users'?: Array<User> | null;
    /**
     * 
     * @type {Array<UserExam>}
     * @memberof Exam
     */
    'userExams'?: Array<UserExam> | null;
}
/**
 * 
 * @export
 * @interface ExamResult
 */
export interface ExamResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof ExamResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof ExamResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {Exam}
     * @memberof ExamResult
     */
    'data'?: Exam;
}


/**
 * 
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Feedback
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Feedback
     */
    'rating'?: number | null;
    /**
     * 
     * @type {FeedbackStatus}
     * @memberof Feedback
     */
    'feedbackStatus'?: FeedbackStatus;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'userId'?: string;
    /**
     * 
     * @type {User}
     * @memberof Feedback
     */
    'user'?: User;
    /**
     * 
     * @type {Array<Course>}
     * @memberof Feedback
     */
    'courses'?: Array<Course> | null;
    /**
     * 
     * @type {Array<CourseFeedback>}
     * @memberof Feedback
     */
    'courseFeedbacks'?: Array<CourseFeedback> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const FeedbackStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type FeedbackStatus = typeof FeedbackStatus[keyof typeof FeedbackStatus];


/**
 * 
 * @export
 * @interface FeedbackViewModel
 */
export interface FeedbackViewModel {
    /**
     * 
     * @type {string}
     * @memberof FeedbackViewModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedbackViewModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedbackViewModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedbackViewModel
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FeedbackViewModel
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FeedbackViewModel
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FeedbackViewModel
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FeedbackViewModel
     */
    'rating'?: number | null;
    /**
     * 
     * @type {FeedbackStatus}
     * @memberof FeedbackViewModel
     */
    'feedbackStatus'?: FeedbackStatus;
    /**
     * 
     * @type {UserDto}
     * @memberof FeedbackViewModel
     */
    'user'?: UserDto;
}


/**
 * 
 * @export
 * @interface FeedbackViewModelResult
 */
export interface FeedbackViewModelResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof FeedbackViewModelResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof FeedbackViewModelResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {FeedbackViewModel}
     * @memberof FeedbackViewModelResult
     */
    'data'?: FeedbackViewModel;
}


/**
 * 
 * @export
 * @interface ForgetPasswordRequest
 */
export interface ForgetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ForgetPasswordRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ForgetPasswordRequest
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ForgetPasswordRequest
     */
    'confirmPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface GetScoreDto
 */
export interface GetScoreDto {
    /**
     * 
     * @type {string}
     * @memberof GetScoreDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScoreDto
     */
    'courseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScoreDto
     */
    'examName'?: string | null;
}
/**
 * 
 * @export
 * @interface GoogleLoginRequest
 */
export interface GoogleLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof GoogleLoginRequest
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const HttpStatusCode = {
    NUMBER_100: 100,
    NUMBER_101: 101,
    NUMBER_102: 102,
    NUMBER_103: 103,
    NUMBER_200: 200,
    NUMBER_201: 201,
    NUMBER_202: 202,
    NUMBER_203: 203,
    NUMBER_204: 204,
    NUMBER_205: 205,
    NUMBER_206: 206,
    NUMBER_207: 207,
    NUMBER_208: 208,
    NUMBER_226: 226,
    NUMBER_300: 300,
    NUMBER_301: 301,
    NUMBER_302: 302,
    NUMBER_303: 303,
    NUMBER_304: 304,
    NUMBER_305: 305,
    NUMBER_306: 306,
    NUMBER_307: 307,
    NUMBER_308: 308,
    NUMBER_400: 400,
    NUMBER_401: 401,
    NUMBER_402: 402,
    NUMBER_403: 403,
    NUMBER_404: 404,
    NUMBER_405: 405,
    NUMBER_406: 406,
    NUMBER_407: 407,
    NUMBER_408: 408,
    NUMBER_409: 409,
    NUMBER_410: 410,
    NUMBER_411: 411,
    NUMBER_412: 412,
    NUMBER_413: 413,
    NUMBER_414: 414,
    NUMBER_415: 415,
    NUMBER_416: 416,
    NUMBER_417: 417,
    NUMBER_421: 421,
    NUMBER_422: 422,
    NUMBER_423: 423,
    NUMBER_424: 424,
    NUMBER_426: 426,
    NUMBER_428: 428,
    NUMBER_429: 429,
    NUMBER_431: 431,
    NUMBER_451: 451,
    NUMBER_500: 500,
    NUMBER_501: 501,
    NUMBER_502: 502,
    NUMBER_503: 503,
    NUMBER_504: 504,
    NUMBER_505: 505,
    NUMBER_506: 506,
    NUMBER_507: 507,
    NUMBER_508: 508,
    NUMBER_510: 510,
    NUMBER_511: 511
} as const;

export type HttpStatusCode = typeof HttpStatusCode[keyof typeof HttpStatusCode];


/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {RoleEnum}
     * @memberof LoginResponse
     */
    'role'?: RoleEnum;
    /**
     * 
     * @type {UserStatus}
     * @memberof LoginResponse
     */
    'status'?: UserStatus;
}


/**
 * 
 * @export
 * @interface LoginResponseResult
 */
export interface LoginResponseResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof LoginResponseResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {LoginResponse}
     * @memberof LoginResponseResult
     */
    'data'?: LoginResponse;
}


/**
 * 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Payment
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'paymentMethod': string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'fee'?: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'courseId'?: string;
    /**
     * 
     * @type {Course}
     * @memberof Payment
     */
    'course'?: Course;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'userId'?: string;
    /**
     * 
     * @type {User}
     * @memberof Payment
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface PaymentViewModel
 */
export interface PaymentViewModel {
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModel
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModel
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PaymentViewModel
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModel
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModel
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModel
     */
    'paymentMethod'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PaymentViewModel
     */
    'fee'?: number;
    /**
     * 
     * @type {CourseViewModel}
     * @memberof PaymentViewModel
     */
    'course'?: CourseViewModel;
    /**
     * 
     * @type {UserDto}
     * @memberof PaymentViewModel
     */
    'user'?: UserDto;
}
/**
 * 
 * @export
 * @interface PaymentViewModelListResult
 */
export interface PaymentViewModelListResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof PaymentViewModelListResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModelListResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<PaymentViewModel>}
     * @memberof PaymentViewModelListResult
     */
    'data'?: Array<PaymentViewModel> | null;
}


/**
 * 
 * @export
 * @interface PaymentViewModelResult
 */
export interface PaymentViewModelResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof PaymentViewModelResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof PaymentViewModelResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {PaymentViewModel}
     * @memberof PaymentViewModelResult
     */
    'data'?: PaymentViewModel;
}


/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Question
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'point': number;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'examId'?: string;
    /**
     * 
     * @type {Exam}
     * @memberof Question
     */
    'exam'?: Exam;
    /**
     * 
     * @type {Array<Answer>}
     * @memberof Question
     */
    'answers'?: Array<Answer> | null;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {UserStatus}
     * @memberof RegisterRequest
     */
    'userStatus'?: UserStatus;
}


/**
 * 
 * @export
 * @interface RegisterResponse
 */
export interface RegisterResponse {
    /**
     * 
     * @type {string}
     * @memberof RegisterResponse
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponse
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {RoleEnum}
     * @memberof RegisterResponse
     */
    'role'?: RoleEnum;
    /**
     * 
     * @type {UserStatus}
     * @memberof RegisterResponse
     */
    'status'?: UserStatus;
}


/**
 * 
 * @export
 * @interface RegisterResponseResult
 */
export interface RegisterResponseResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof RegisterResponseResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponseResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {RegisterResponse}
     * @memberof RegisterResponseResult
     */
    'data'?: RegisterResponse;
}


/**
 * 
 * @export
 * @interface ReportDataDto
 */
export interface ReportDataDto {
    /**
     * 
     * @type {number}
     * @memberof ReportDataDto
     */
    'dataInMonday'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportDataDto
     */
    'dataInTuesday'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportDataDto
     */
    'dataInWednesday'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportDataDto
     */
    'dataInThursday'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportDataDto
     */
    'dataInFriday'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportDataDto
     */
    'dataInSaturday'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportDataDto
     */
    'dataInSunday'?: number;
}
/**
 * 
 * @export
 * @interface ReportDataDtoResult
 */
export interface ReportDataDtoResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof ReportDataDtoResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof ReportDataDtoResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {ReportDataDto}
     * @memberof ReportDataDtoResult
     */
    'data'?: ReportDataDto;
}


/**
 * 
 * @export
 * @interface ResultExamDto
 */
export interface ResultExamDto {
    /**
     * 
     * @type {string}
     * @memberof ResultExamDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultExamDto
     */
    'examId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResultExamDto
     */
    'results'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'roleName': string;
    /**
     * 
     * @type {Array<User>}
     * @memberof Role
     */
    'users'?: Array<User> | null;
}
/**
 * 
 * @export
 * @interface RoleDto
 */
export interface RoleDto {
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    'roleName'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RoleEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type RoleEnum = typeof RoleEnum[keyof typeof RoleEnum];


/**
 * 
 * @export
 * @interface UpdateCourseAreaRequest
 */
export interface UpdateCourseAreaRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseAreaRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {CourseAreaStatus}
     * @memberof UpdateCourseAreaRequest
     */
    'status'?: CourseAreaStatus;
}


/**
 * 
 * @export
 * @interface UpdateCourseCategoryRequest
 */
export interface UpdateCourseCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseCategoryRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseCategoryRequest
     */
    'languageId'?: string | null;
    /**
     * 
     * @type {CourseCategoryStatus}
     * @memberof UpdateCourseCategoryRequest
     */
    'status'?: CourseCategoryStatus;
}


/**
 * 
 * @export
 * @interface UpdateCourseLanguageRequest
 */
export interface UpdateCourseLanguageRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseLanguageRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {CourseLanguageStatus}
     * @memberof UpdateCourseLanguageRequest
     */
    'status'?: CourseLanguageStatus;
}


/**
 * 
 * @export
 * @interface UpdateCourseRequest
 */
export interface UpdateCourseRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseRequest
     */
    'duration'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateCourseRequest
     */
    'tuitionfee'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseRequest
     */
    'centerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseRequest
     */
    'courseAreaId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseRequest
     */
    'courseLanguageId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseRequest
     */
    'courseCategoryId'?: string | null;
    /**
     * 
     * @type {CourseStatus}
     * @memberof UpdateCourseRequest
     */
    'status'?: CourseStatus;
}


/**
 * 
 * @export
 * @interface UpdateFeedbackRequest
 */
export interface UpdateFeedbackRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateFeedbackRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateFeedbackRequest
     */
    'rating'?: number | null;
    /**
     * 
     * @type {FeedbackStatus}
     * @memberof UpdateFeedbackRequest
     */
    'feedbackStatus'?: FeedbackStatus;
    /**
     * 
     * @type {string}
     * @memberof UpdateFeedbackRequest
     */
    'userId'?: string | null;
}


/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {UserStatus}
     * @memberof UpdateUserRequest
     */
    'status'?: UserStatus;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'roleId'?: string | null;
}


/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'description'?: string | null;
    /**
     * 
     * @type {UserStatus}
     * @memberof User
     */
    'status'?: UserStatus;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'roleId'?: string;
    /**
     * 
     * @type {Role}
     * @memberof User
     */
    'role'?: Role;
    /**
     * 
     * @type {Array<Feedback>}
     * @memberof User
     */
    'feedbacks'?: Array<Feedback> | null;
    /**
     * 
     * @type {Array<Course>}
     * @memberof User
     */
    'courses'?: Array<Course> | null;
    /**
     * 
     * @type {Array<UserCourse>}
     * @memberof User
     */
    'userCourses'?: Array<UserCourse> | null;
    /**
     * 
     * @type {Array<Course>}
     * @memberof User
     */
    'ownCourses'?: Array<Course> | null;
    /**
     * 
     * @type {Array<Payment>}
     * @memberof User
     */
    'payments'?: Array<Payment> | null;
    /**
     * 
     * @type {Array<Exam>}
     * @memberof User
     */
    'ownExams'?: Array<Exam> | null;
    /**
     * 
     * @type {Array<Exam>}
     * @memberof User
     */
    'exams'?: Array<Exam> | null;
    /**
     * 
     * @type {Array<UserExam>}
     * @memberof User
     */
    'userExams'?: Array<UserExam> | null;
}


/**
 * 
 * @export
 * @interface UserCourse
 */
export interface UserCourse {
    /**
     * 
     * @type {string}
     * @memberof UserCourse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCourse
     */
    'userId'?: string;
    /**
     * 
     * @type {User}
     * @memberof UserCourse
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof UserCourse
     */
    'courseId'?: string;
    /**
     * 
     * @type {Course}
     * @memberof UserCourse
     */
    'course'?: Course;
    /**
     * 
     * @type {string}
     * @memberof UserCourse
     */
    'joinedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCourse
     */
    'finishedAt'?: string;
    /**
     * 
     * @type {UserCourseStatus}
     * @memberof UserCourse
     */
    'status'?: UserCourseStatus;
}


/**
 * 
 * @export
 * @interface UserCourseDto
 */
export interface UserCourseDto {
    /**
     * 
     * @type {string}
     * @memberof UserCourseDto
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCourseDto
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCourseDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCourseDto
     */
    'joinedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCourseDto
     */
    'course'?: string | null;
}
/**
 * 
 * @export
 * @interface UserCourseDtoIPaginate
 */
export interface UserCourseDtoIPaginate {
    /**
     * 
     * @type {number}
     * @memberof UserCourseDtoIPaginate
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserCourseDtoIPaginate
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserCourseDtoIPaginate
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserCourseDtoIPaginate
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<UserCourseDto>}
     * @memberof UserCourseDtoIPaginate
     */
    'items'?: Array<UserCourseDto> | null;
}
/**
 * 
 * @export
 * @interface UserCourseDtoPagingResult
 */
export interface UserCourseDtoPagingResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof UserCourseDtoPagingResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof UserCourseDtoPagingResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {UserCourseDtoIPaginate}
     * @memberof UserCourseDtoPagingResult
     */
    'data'?: UserCourseDtoIPaginate;
    /**
     * 
     * @type {number}
     * @memberof UserCourseDtoPagingResult
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserCourseDtoPagingResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserCourseDtoPagingResult
     */
    'totalCount'?: number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const UserCourseStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type UserCourseStatus = typeof UserCourseStatus[keyof typeof UserCourseStatus];


/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {UserStatus}
     * @memberof UserDto
     */
    'status'?: UserStatus;
}


/**
 * 
 * @export
 * @interface UserExam
 */
export interface UserExam {
    /**
     * 
     * @type {string}
     * @memberof UserExam
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserExam
     */
    'userId'?: string;
    /**
     * 
     * @type {User}
     * @memberof UserExam
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof UserExam
     */
    'examId'?: string;
    /**
     * 
     * @type {Exam}
     * @memberof UserExam
     */
    'exam'?: Exam;
    /**
     * 
     * @type {number}
     * @memberof UserExam
     */
    'score'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserExam
     */
    'totalQuestionRight'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserExam
     */
    'totalQuestionWrong'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserExam
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const UserStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type UserStatus = typeof UserStatus[keyof typeof UserStatus];


/**
 * 
 * @export
 * @interface UserViewModel
 */
export interface UserViewModel {
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserViewModel
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {UserStatus}
     * @memberof UserViewModel
     */
    'status'?: UserStatus;
    /**
     * 
     * @type {RoleDto}
     * @memberof UserViewModel
     */
    'role'?: RoleDto;
}


/**
 * 
 * @export
 * @interface UserViewModelIPaginate
 */
export interface UserViewModelIPaginate {
    /**
     * 
     * @type {number}
     * @memberof UserViewModelIPaginate
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserViewModelIPaginate
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserViewModelIPaginate
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserViewModelIPaginate
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<UserViewModel>}
     * @memberof UserViewModelIPaginate
     */
    'items'?: Array<UserViewModel> | null;
}
/**
 * 
 * @export
 * @interface UserViewModelListResult
 */
export interface UserViewModelListResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof UserViewModelListResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof UserViewModelListResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<UserViewModel>}
     * @memberof UserViewModelListResult
     */
    'data'?: Array<UserViewModel> | null;
}


/**
 * 
 * @export
 * @interface UserViewModelPagingResult
 */
export interface UserViewModelPagingResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof UserViewModelPagingResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof UserViewModelPagingResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {UserViewModelIPaginate}
     * @memberof UserViewModelPagingResult
     */
    'data'?: UserViewModelIPaginate;
    /**
     * 
     * @type {number}
     * @memberof UserViewModelPagingResult
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserViewModelPagingResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserViewModelPagingResult
     */
    'totalCount'?: number;
}


/**
 * 
 * @export
 * @interface UserViewModelResult
 */
export interface UserViewModelResult {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof UserViewModelResult
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof UserViewModelResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {UserViewModel}
     * @memberof UserViewModelResult
     */
    'data'?: UserViewModel;
}



/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgetPasswordRequest} [forgetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ForgetPasswordPut: async (forgetPasswordRequest?: ForgetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/forget-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GoogleLoginRequest} [googleLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GoogleLoginPut: async (googleLoginRequest?: GoogleLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/google/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(googleLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoginPut: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RegisterPut: async (registerRequest?: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgetPasswordRequest} [forgetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ForgetPasswordPut(forgetPasswordRequest?: ForgetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ForgetPasswordPut(forgetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiV1ForgetPasswordPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GoogleLoginRequest} [googleLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GoogleLoginPut(googleLoginRequest?: GoogleLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GoogleLoginPut(googleLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiV1GoogleLoginPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LoginPut(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoginPut(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiV1LoginPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RegisterPut(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RegisterPut(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiV1RegisterPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgetPasswordRequest} [forgetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ForgetPasswordPut(forgetPasswordRequest?: ForgetPasswordRequest, options?: any): AxiosPromise<LoginResponseResult> {
            return localVarFp.apiV1ForgetPasswordPut(forgetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GoogleLoginRequest} [googleLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GoogleLoginPut(googleLoginRequest?: GoogleLoginRequest, options?: any): AxiosPromise<LoginResponseResult> {
            return localVarFp.apiV1GoogleLoginPut(googleLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoginPut(loginRequest?: LoginRequest, options?: any): AxiosPromise<LoginResponseResult> {
            return localVarFp.apiV1LoginPut(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RegisterPut(registerRequest?: RegisterRequest, options?: any): AxiosPromise<RegisterResponseResult> {
            return localVarFp.apiV1RegisterPut(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {ForgetPasswordRequest} [forgetPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1ForgetPasswordPut(forgetPasswordRequest?: ForgetPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiV1ForgetPasswordPut(forgetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GoogleLoginRequest} [googleLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1GoogleLoginPut(googleLoginRequest?: GoogleLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiV1GoogleLoginPut(googleLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1LoginPut(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiV1LoginPut(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} [registerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1RegisterPut(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiV1RegisterPut(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [title] 
         * @param {CourseStatus} [status] 
         * @param {string} [centerName] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocAdminGet: async (title?: string, status?: CourseStatus, centerName?: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/khoa-hoc-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (centerName !== undefined) {
                localVarQueryParameter['centerName'] = centerName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [title] 
         * @param {string} [areaId] 
         * @param {string} [languageId] 
         * @param {string} [categoryId] 
         * @param {string} [sort] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocGet: async (title?: string, areaId?: string, languageId?: string, categoryId?: string, sort?: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/khoa-hoc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (areaId !== undefined) {
                localVarQueryParameter['AreaId'] = areaId;
            }

            if (languageId !== undefined) {
                localVarQueryParameter['LanguageId'] = languageId;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1KhoaHocIdDelete', 'id', id)
            const localVarPath = `/api/v1/khoa-hoc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1KhoaHocIdGet', 'id', id)
            const localVarPath = `/api/v1/khoa-hoc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseRequest} [updateCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocIdPut: async (id: string, updateCourseRequest?: UpdateCourseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1KhoaHocIdPut', 'id', id)
            const localVarPath = `/api/v1/khoa-hoc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCourseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocNoiBatGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/khoa-hoc-noi-bat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCourseRequest} [createCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocPost: async (createCourseRequest?: CreateCourseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/khoa-hoc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCourseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [title] 
         * @param {CourseStatus} [status] 
         * @param {string} [centerName] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhoaHocAdminGet(title?: string, status?: CourseStatus, centerName?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocAdminGet(title, status, centerName, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiV1KhoaHocAdminGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [title] 
         * @param {string} [areaId] 
         * @param {string} [languageId] 
         * @param {string} [categoryId] 
         * @param {string} [sort] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhoaHocGet(title?: string, areaId?: string, languageId?: string, categoryId?: string, sort?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocGet(title, areaId, languageId, categoryId, sort, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiV1KhoaHocGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhoaHocIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiV1KhoaHocIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhoaHocIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiV1KhoaHocIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseRequest} [updateCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhoaHocIdPut(id: string, updateCourseRequest?: UpdateCourseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocIdPut(id, updateCourseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiV1KhoaHocIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhoaHocNoiBatGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocNoiBatGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiV1KhoaHocNoiBatGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCourseRequest} [createCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhoaHocPost(createCourseRequest?: CreateCourseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocPost(createCourseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiV1KhoaHocPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [title] 
         * @param {CourseStatus} [status] 
         * @param {string} [centerName] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocAdminGet(title?: string, status?: CourseStatus, centerName?: string, page?: number, size?: number, options?: any): AxiosPromise<CourseViewModelListResult> {
            return localVarFp.apiV1KhoaHocAdminGet(title, status, centerName, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [title] 
         * @param {string} [areaId] 
         * @param {string} [languageId] 
         * @param {string} [categoryId] 
         * @param {string} [sort] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocGet(title?: string, areaId?: string, languageId?: string, categoryId?: string, sort?: string, page?: number, size?: number, options?: any): AxiosPromise<CourseViewModelListResult> {
            return localVarFp.apiV1KhoaHocGet(title, areaId, languageId, categoryId, sort, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1KhoaHocIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocIdGet(id: string, options?: any): AxiosPromise<CourseViewModelResult> {
            return localVarFp.apiV1KhoaHocIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseRequest} [updateCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocIdPut(id: string, updateCourseRequest?: UpdateCourseRequest, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1KhoaHocIdPut(id, updateCourseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocNoiBatGet(options?: any): AxiosPromise<CourseViewModelListResult> {
            return localVarFp.apiV1KhoaHocNoiBatGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCourseRequest} [createCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhoaHocPost(createCourseRequest?: CreateCourseRequest, options?: any): AxiosPromise<CourseViewModelResult> {
            return localVarFp.apiV1KhoaHocPost(createCourseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI {
    /**
     * 
     * @param {string} [title] 
     * @param {CourseStatus} [status] 
     * @param {string} [centerName] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiV1KhoaHocAdminGet(title?: string, status?: CourseStatus, centerName?: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiV1KhoaHocAdminGet(title, status, centerName, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [title] 
     * @param {string} [areaId] 
     * @param {string} [languageId] 
     * @param {string} [categoryId] 
     * @param {string} [sort] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiV1KhoaHocGet(title?: string, areaId?: string, languageId?: string, categoryId?: string, sort?: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiV1KhoaHocGet(title, areaId, languageId, categoryId, sort, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiV1KhoaHocIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiV1KhoaHocIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiV1KhoaHocIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiV1KhoaHocIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCourseRequest} [updateCourseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiV1KhoaHocIdPut(id: string, updateCourseRequest?: UpdateCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiV1KhoaHocIdPut(id, updateCourseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiV1KhoaHocNoiBatGet(options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiV1KhoaHocNoiBatGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCourseRequest} [createCourseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiV1KhoaHocPost(createCourseRequest?: CreateCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiV1KhoaHocPost(createCourseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseAreaApi - axios parameter creator
 * @export
 */
export const CourseAreaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/khu-vuc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1KhuVucIdDelete', 'id', id)
            const localVarPath = `/api/v1/khu-vuc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1KhuVucIdGet', 'id', id)
            const localVarPath = `/api/v1/khu-vuc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseAreaRequest} [updateCourseAreaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucIdPut: async (id: string, updateCourseAreaRequest?: UpdateCourseAreaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1KhuVucIdPut', 'id', id)
            const localVarPath = `/api/v1/khu-vuc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCourseAreaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCourseAreaRequest} [createCourseAreaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucPost: async (createCourseAreaRequest?: CreateCourseAreaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/khu-vuc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCourseAreaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseAreaApi - functional programming interface
 * @export
 */
export const CourseAreaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseAreaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhuVucGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseAreaViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseAreaApi.apiV1KhuVucGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhuVucIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseAreaApi.apiV1KhuVucIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhuVucIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseAreaViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseAreaApi.apiV1KhuVucIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseAreaRequest} [updateCourseAreaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhuVucIdPut(id: string, updateCourseAreaRequest?: UpdateCourseAreaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucIdPut(id, updateCourseAreaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseAreaApi.apiV1KhuVucIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCourseAreaRequest} [createCourseAreaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1KhuVucPost(createCourseAreaRequest?: CreateCourseAreaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseAreaViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucPost(createCourseAreaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseAreaApi.apiV1KhuVucPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseAreaApi - factory interface
 * @export
 */
export const CourseAreaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseAreaApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucGet(page?: number, size?: number, options?: any): AxiosPromise<CourseAreaViewModelListResult> {
            return localVarFp.apiV1KhuVucGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1KhuVucIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucIdGet(id: string, options?: any): AxiosPromise<CourseAreaViewModelListResult> {
            return localVarFp.apiV1KhuVucIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseAreaRequest} [updateCourseAreaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucIdPut(id: string, updateCourseAreaRequest?: UpdateCourseAreaRequest, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1KhuVucIdPut(id, updateCourseAreaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCourseAreaRequest} [createCourseAreaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1KhuVucPost(createCourseAreaRequest?: CreateCourseAreaRequest, options?: any): AxiosPromise<CourseAreaViewModelResult> {
            return localVarFp.apiV1KhuVucPost(createCourseAreaRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseAreaApi - object-oriented interface
 * @export
 * @class CourseAreaApi
 * @extends {BaseAPI}
 */
export class CourseAreaApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseAreaApi
     */
    public apiV1KhuVucGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return CourseAreaApiFp(this.configuration).apiV1KhuVucGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseAreaApi
     */
    public apiV1KhuVucIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CourseAreaApiFp(this.configuration).apiV1KhuVucIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseAreaApi
     */
    public apiV1KhuVucIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CourseAreaApiFp(this.configuration).apiV1KhuVucIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCourseAreaRequest} [updateCourseAreaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseAreaApi
     */
    public apiV1KhuVucIdPut(id: string, updateCourseAreaRequest?: UpdateCourseAreaRequest, options?: RawAxiosRequestConfig) {
        return CourseAreaApiFp(this.configuration).apiV1KhuVucIdPut(id, updateCourseAreaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCourseAreaRequest} [createCourseAreaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseAreaApi
     */
    public apiV1KhuVucPost(createCourseAreaRequest?: CreateCourseAreaRequest, options?: RawAxiosRequestConfig) {
        return CourseAreaApiFp(this.configuration).apiV1KhuVucPost(createCourseAreaRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseCategoryApi - axios parameter creator
 * @export
 */
export const CourseCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/loai-khoa-hoc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1LoaiKhoaHocIdDelete', 'id', id)
            const localVarPath = `/api/v1/loai-khoa-hoc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1LoaiKhoaHocIdGet', 'id', id)
            const localVarPath = `/api/v1/loai-khoa-hoc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseCategoryRequest} [updateCourseCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocIdPut: async (id: string, updateCourseCategoryRequest?: UpdateCourseCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1LoaiKhoaHocIdPut', 'id', id)
            const localVarPath = `/api/v1/loai-khoa-hoc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCourseCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCourseCategoryRequest} [createCourseCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocPost: async (createCourseCategoryRequest?: CreateCourseCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/loai-khoa-hoc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCourseCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseCategoryApi - functional programming interface
 * @export
 */
export const CourseCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LoaiKhoaHocGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCategoryViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LoaiKhoaHocIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LoaiKhoaHocIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCategoryViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseCategoryRequest} [updateCourseCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LoaiKhoaHocIdPut(id: string, updateCourseCategoryRequest?: UpdateCourseCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocIdPut(id, updateCourseCategoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCourseCategoryRequest} [createCourseCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LoaiKhoaHocPost(createCourseCategoryRequest?: CreateCourseCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCategoryViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocPost(createCourseCategoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseCategoryApi - factory interface
 * @export
 */
export const CourseCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseCategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocGet(page?: number, size?: number, options?: any): AxiosPromise<CourseCategoryViewModelListResult> {
            return localVarFp.apiV1LoaiKhoaHocGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1LoaiKhoaHocIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocIdGet(id: string, options?: any): AxiosPromise<CourseCategoryViewModelListResult> {
            return localVarFp.apiV1LoaiKhoaHocIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseCategoryRequest} [updateCourseCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocIdPut(id: string, updateCourseCategoryRequest?: UpdateCourseCategoryRequest, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1LoaiKhoaHocIdPut(id, updateCourseCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCourseCategoryRequest} [createCourseCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoaiKhoaHocPost(createCourseCategoryRequest?: CreateCourseCategoryRequest, options?: any): AxiosPromise<CourseCategoryViewModelResult> {
            return localVarFp.apiV1LoaiKhoaHocPost(createCourseCategoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseCategoryApi - object-oriented interface
 * @export
 * @class CourseCategoryApi
 * @extends {BaseAPI}
 */
export class CourseCategoryApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCategoryApi
     */
    public apiV1LoaiKhoaHocGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return CourseCategoryApiFp(this.configuration).apiV1LoaiKhoaHocGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCategoryApi
     */
    public apiV1LoaiKhoaHocIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CourseCategoryApiFp(this.configuration).apiV1LoaiKhoaHocIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCategoryApi
     */
    public apiV1LoaiKhoaHocIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CourseCategoryApiFp(this.configuration).apiV1LoaiKhoaHocIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCourseCategoryRequest} [updateCourseCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCategoryApi
     */
    public apiV1LoaiKhoaHocIdPut(id: string, updateCourseCategoryRequest?: UpdateCourseCategoryRequest, options?: RawAxiosRequestConfig) {
        return CourseCategoryApiFp(this.configuration).apiV1LoaiKhoaHocIdPut(id, updateCourseCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCourseCategoryRequest} [createCourseCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCategoryApi
     */
    public apiV1LoaiKhoaHocPost(createCourseCategoryRequest?: CreateCourseCategoryRequest, options?: RawAxiosRequestConfig) {
        return CourseCategoryApiFp(this.configuration).apiV1LoaiKhoaHocPost(createCourseCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseLanguageApi - axios parameter creator
 * @export
 */
export const CourseLanguageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ngon-ngu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1NgonNguIdDelete', 'id', id)
            const localVarPath = `/api/v1/ngon-ngu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1NgonNguIdGet', 'id', id)
            const localVarPath = `/api/v1/ngon-ngu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguIdLoaiKhoaHocGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1NgonNguIdLoaiKhoaHocGet', 'id', id)
            const localVarPath = `/api/v1/ngon-ngu/{id}/loai-khoa-hoc`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseLanguageRequest} [updateCourseLanguageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguIdPut: async (id: string, updateCourseLanguageRequest?: UpdateCourseLanguageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1NgonNguIdPut', 'id', id)
            const localVarPath = `/api/v1/ngon-ngu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCourseLanguageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCourseLanguageRequest} [createCourseLanguageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguPost: async (createCourseLanguageRequest?: CreateCourseLanguageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ngon-ngu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCourseLanguageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseLanguageApi - functional programming interface
 * @export
 */
export const CourseLanguageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseLanguageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NgonNguGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseLanguageViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLanguageApi.apiV1NgonNguGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NgonNguIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLanguageApi.apiV1NgonNguIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NgonNguIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseLanguageViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLanguageApi.apiV1NgonNguIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NgonNguIdLoaiKhoaHocGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCategoryViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguIdLoaiKhoaHocGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLanguageApi.apiV1NgonNguIdLoaiKhoaHocGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseLanguageRequest} [updateCourseLanguageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NgonNguIdPut(id: string, updateCourseLanguageRequest?: UpdateCourseLanguageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguIdPut(id, updateCourseLanguageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLanguageApi.apiV1NgonNguIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCourseLanguageRequest} [createCourseLanguageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NgonNguPost(createCourseLanguageRequest?: CreateCourseLanguageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseLanguageViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguPost(createCourseLanguageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLanguageApi.apiV1NgonNguPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseLanguageApi - factory interface
 * @export
 */
export const CourseLanguageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseLanguageApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguGet(page?: number, size?: number, options?: any): AxiosPromise<CourseLanguageViewModelListResult> {
            return localVarFp.apiV1NgonNguGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1NgonNguIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguIdGet(id: string, options?: any): AxiosPromise<CourseLanguageViewModelResult> {
            return localVarFp.apiV1NgonNguIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguIdLoaiKhoaHocGet(id: string, options?: any): AxiosPromise<CourseCategoryViewModelListResult> {
            return localVarFp.apiV1NgonNguIdLoaiKhoaHocGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseLanguageRequest} [updateCourseLanguageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguIdPut(id: string, updateCourseLanguageRequest?: UpdateCourseLanguageRequest, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1NgonNguIdPut(id, updateCourseLanguageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCourseLanguageRequest} [createCourseLanguageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NgonNguPost(createCourseLanguageRequest?: CreateCourseLanguageRequest, options?: any): AxiosPromise<CourseLanguageViewModelResult> {
            return localVarFp.apiV1NgonNguPost(createCourseLanguageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseLanguageApi - object-oriented interface
 * @export
 * @class CourseLanguageApi
 * @extends {BaseAPI}
 */
export class CourseLanguageApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLanguageApi
     */
    public apiV1NgonNguGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return CourseLanguageApiFp(this.configuration).apiV1NgonNguGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLanguageApi
     */
    public apiV1NgonNguIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CourseLanguageApiFp(this.configuration).apiV1NgonNguIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLanguageApi
     */
    public apiV1NgonNguIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CourseLanguageApiFp(this.configuration).apiV1NgonNguIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLanguageApi
     */
    public apiV1NgonNguIdLoaiKhoaHocGet(id: string, options?: RawAxiosRequestConfig) {
        return CourseLanguageApiFp(this.configuration).apiV1NgonNguIdLoaiKhoaHocGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCourseLanguageRequest} [updateCourseLanguageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLanguageApi
     */
    public apiV1NgonNguIdPut(id: string, updateCourseLanguageRequest?: UpdateCourseLanguageRequest, options?: RawAxiosRequestConfig) {
        return CourseLanguageApiFp(this.configuration).apiV1NgonNguIdPut(id, updateCourseLanguageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCourseLanguageRequest} [createCourseLanguageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLanguageApi
     */
    public apiV1NgonNguPost(createCourseLanguageRequest?: CreateCourseLanguageRequest, options?: RawAxiosRequestConfig) {
        return CourseLanguageApiFp(this.configuration).apiV1NgonNguPost(createCourseLanguageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardFinanceGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/finance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardTeacherGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardFinanceGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportDataDtoResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DashboardFinanceGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.apiV1DashboardFinanceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardTeacherGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportDataDtoResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DashboardTeacherGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.apiV1DashboardTeacherGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportDataDtoResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DashboardUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.apiV1DashboardUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardFinanceGet(options?: any): AxiosPromise<ReportDataDtoResult> {
            return localVarFp.apiV1DashboardFinanceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardTeacherGet(options?: any): AxiosPromise<ReportDataDtoResult> {
            return localVarFp.apiV1DashboardTeacherGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardUserGet(options?: any): AxiosPromise<ReportDataDtoResult> {
            return localVarFp.apiV1DashboardUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiV1DashboardFinanceGet(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).apiV1DashboardFinanceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiV1DashboardTeacherGet(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).apiV1DashboardTeacherGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiV1DashboardUserGet(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).apiV1DashboardUserGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExamApi - axios parameter creator
 * @export
 */
export const ExamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [examName] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamCourseIdIdGet: async (id: string, examName?: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ExamCourseIdIdGet', 'id', id)
            const localVarPath = `/api/v1/exam/courseId/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (examName !== undefined) {
                localVarQueryParameter['examName'] = examName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ExamDelete', 'id', id)
            const localVarPath = `/api/v1/exam`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {GetScoreDto} [getScoreDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamGetScorePost: async (page?: number, size?: number, getScoreDto?: GetScoreDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/exam/get-score`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getScoreDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ExamIdGet', 'id', id)
            const localVarPath = `/api/v1/exam/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResultExamDto} [resultExamDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamResultPost: async (resultExamDto?: ResultExamDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/exam/result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resultExamDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [teacherId] 
         * @param {string} [courseId] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamUploadPost: async (teacherId?: string, courseId?: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/exam/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (teacherId !== undefined) {
                localVarQueryParameter['teacherId'] = teacherId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExamApi - functional programming interface
 * @export
 */
export const ExamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExamApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [examName] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExamCourseIdIdGet(id: string, examName?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanPagingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExamCourseIdIdGet(id, examName, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamApi.apiV1ExamCourseIdIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExamDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExamDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamApi.apiV1ExamDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {GetScoreDto} [getScoreDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExamGetScorePost(page?: number, size?: number, getScoreDto?: GetScoreDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanPagingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExamGetScorePost(page, size, getScoreDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamApi.apiV1ExamGetScorePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExamIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExamResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExamIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamApi.apiV1ExamIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResultExamDto} [resultExamDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExamResultPost(resultExamDto?: ResultExamDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanPagingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExamResultPost(resultExamDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamApi.apiV1ExamResultPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [teacherId] 
         * @param {string} [courseId] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExamUploadPost(teacherId?: string, courseId?: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExamUploadPost(teacherId, courseId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamApi.apiV1ExamUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExamApi - factory interface
 * @export
 */
export const ExamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExamApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [examName] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamCourseIdIdGet(id: string, examName?: string, page?: number, size?: number, options?: any): AxiosPromise<BooleanPagingResult> {
            return localVarFp.apiV1ExamCourseIdIdGet(id, examName, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1ExamDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {GetScoreDto} [getScoreDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamGetScorePost(page?: number, size?: number, getScoreDto?: GetScoreDto, options?: any): AxiosPromise<BooleanPagingResult> {
            return localVarFp.apiV1ExamGetScorePost(page, size, getScoreDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamIdGet(id: string, options?: any): AxiosPromise<ExamResult> {
            return localVarFp.apiV1ExamIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResultExamDto} [resultExamDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamResultPost(resultExamDto?: ResultExamDto, options?: any): AxiosPromise<BooleanPagingResult> {
            return localVarFp.apiV1ExamResultPost(resultExamDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [teacherId] 
         * @param {string} [courseId] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExamUploadPost(teacherId?: string, courseId?: string, file?: File, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1ExamUploadPost(teacherId, courseId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExamApi - object-oriented interface
 * @export
 * @class ExamApi
 * @extends {BaseAPI}
 */
export class ExamApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {string} [examName] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public apiV1ExamCourseIdIdGet(id: string, examName?: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).apiV1ExamCourseIdIdGet(id, examName, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public apiV1ExamDelete(id: string, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).apiV1ExamDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {GetScoreDto} [getScoreDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public apiV1ExamGetScorePost(page?: number, size?: number, getScoreDto?: GetScoreDto, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).apiV1ExamGetScorePost(page, size, getScoreDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public apiV1ExamIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).apiV1ExamIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResultExamDto} [resultExamDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public apiV1ExamResultPost(resultExamDto?: ResultExamDto, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).apiV1ExamResultPost(resultExamDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [teacherId] 
     * @param {string} [courseId] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public apiV1ExamUploadPost(teacherId?: string, courseId?: string, file?: File, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).apiV1ExamUploadPost(teacherId, courseId, file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FeedbackApi - axios parameter creator
 * @export
 */
export const FeedbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanGet: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/binh-luan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1BinhLuanIdDelete', 'id', id)
            const localVarPath = `/api/v1/binh-luan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateFeedbackRequest} [createFeedbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanIdPost: async (id: string, createFeedbackRequest?: CreateFeedbackRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1BinhLuanIdPost', 'id', id)
            const localVarPath = `/api/v1/binh-luan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFeedbackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFeedbackRequest} [updateFeedbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanIdPut: async (id: string, updateFeedbackRequest?: UpdateFeedbackRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1BinhLuanIdPut', 'id', id)
            const localVarPath = `/api/v1/binh-luan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFeedbackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanPagingGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/binh-luan-paging`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedbackApi - functional programming interface
 * @export
 */
export const FeedbackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedbackApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BinhLuanGet(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedbackApi.apiV1BinhLuanGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BinhLuanIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedbackApi.apiV1BinhLuanIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateFeedbackRequest} [createFeedbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BinhLuanIdPost(id: string, createFeedbackRequest?: CreateFeedbackRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanIdPost(id, createFeedbackRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedbackApi.apiV1BinhLuanIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFeedbackRequest} [updateFeedbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BinhLuanIdPut(id: string, updateFeedbackRequest?: UpdateFeedbackRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanIdPut(id, updateFeedbackRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedbackApi.apiV1BinhLuanIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BinhLuanPagingGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanPagingGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedbackApi.apiV1BinhLuanPagingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeedbackApi - factory interface
 * @export
 */
export const FeedbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedbackApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanGet(id?: string, options?: any): AxiosPromise<CourseViewModelResult> {
            return localVarFp.apiV1BinhLuanGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1BinhLuanIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateFeedbackRequest} [createFeedbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanIdPost(id: string, createFeedbackRequest?: CreateFeedbackRequest, options?: any): AxiosPromise<FeedbackViewModelResult> {
            return localVarFp.apiV1BinhLuanIdPost(id, createFeedbackRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFeedbackRequest} [updateFeedbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanIdPut(id: string, updateFeedbackRequest?: UpdateFeedbackRequest, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1BinhLuanIdPut(id, updateFeedbackRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BinhLuanPagingGet(page?: number, size?: number, options?: any): AxiosPromise<CourseViewModelListResult> {
            return localVarFp.apiV1BinhLuanPagingGet(page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedbackApi - object-oriented interface
 * @export
 * @class FeedbackApi
 * @extends {BaseAPI}
 */
export class FeedbackApi extends BaseAPI {
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    public apiV1BinhLuanGet(id?: string, options?: RawAxiosRequestConfig) {
        return FeedbackApiFp(this.configuration).apiV1BinhLuanGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    public apiV1BinhLuanIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return FeedbackApiFp(this.configuration).apiV1BinhLuanIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateFeedbackRequest} [createFeedbackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    public apiV1BinhLuanIdPost(id: string, createFeedbackRequest?: CreateFeedbackRequest, options?: RawAxiosRequestConfig) {
        return FeedbackApiFp(this.configuration).apiV1BinhLuanIdPost(id, createFeedbackRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateFeedbackRequest} [updateFeedbackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    public apiV1BinhLuanIdPut(id: string, updateFeedbackRequest?: UpdateFeedbackRequest, options?: RawAxiosRequestConfig) {
        return FeedbackApiFp(this.configuration).apiV1BinhLuanIdPut(id, updateFeedbackRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    public apiV1BinhLuanPagingGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return FeedbackApiFp(this.configuration).apiV1BinhLuanPagingGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DownloadGet: async (fileName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [contentType] 
         * @param {string} [contentDisposition] 
         * @param {{ [key: string]: Array<string>; }} [headers] 
         * @param {number} [length] 
         * @param {string} [name] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UploadPost: async (contentType?: string, contentDisposition?: string, headers?: { [key: string]: Array<string>; }, length?: number, name?: string, fileName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (contentType !== undefined) { 
                localVarFormParams.append('ContentType', contentType as any);
            }
    
            if (contentDisposition !== undefined) { 
                localVarFormParams.append('ContentDisposition', contentDisposition as any);
            }
    
            if (headers !== undefined) { 
                localVarFormParams.append('Headers', new Blob([JSON.stringify(headers)], { type: "application/json", }));
            }
    
            if (length !== undefined) { 
                localVarFormParams.append('Length', length as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('FileName', fileName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DownloadGet(fileName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DownloadGet(fileName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.apiV1DownloadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [contentType] 
         * @param {string} [contentDisposition] 
         * @param {{ [key: string]: Array<string>; }} [headers] 
         * @param {number} [length] 
         * @param {string} [name] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UploadPost(contentType?: string, contentDisposition?: string, headers?: { [key: string]: Array<string>; }, length?: number, name?: string, fileName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UploadPost(contentType, contentDisposition, headers, length, name, fileName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.apiV1UploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DownloadGet(fileName?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1DownloadGet(fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [contentType] 
         * @param {string} [contentDisposition] 
         * @param {{ [key: string]: Array<string>; }} [headers] 
         * @param {number} [length] 
         * @param {string} [name] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UploadPost(contentType?: string, contentDisposition?: string, headers?: { [key: string]: Array<string>; }, length?: number, name?: string, fileName?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UploadPost(contentType, contentDisposition, headers, length, name, fileName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public apiV1DownloadGet(fileName?: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).apiV1DownloadGet(fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [contentType] 
     * @param {string} [contentDisposition] 
     * @param {{ [key: string]: Array<string>; }} [headers] 
     * @param {number} [length] 
     * @param {string} [name] 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public apiV1UploadPost(contentType?: string, contentDisposition?: string, headers?: { [key: string]: Array<string>; }, length?: number, name?: string, fileName?: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).apiV1UploadPost(contentType, contentDisposition, headers, length, name, fileName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PayOsApi - axios parameter creator
 * @export
 */
export const PayOsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [courseId] 
         * @param {string} [paymentMethod] 
         * @param {number} [fee] 
         * @param {string} [fullName] 
         * @param {string} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PayOsPost: async (userId?: string, courseId?: string, paymentMethod?: string, fee?: number, fullName?: string, phoneNumber?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/PayOs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['paymentMethod'] = paymentMethod;
            }

            if (fee !== undefined) {
                localVarQueryParameter['fee'] = fee;
            }

            if (fullName !== undefined) {
                localVarQueryParameter['fullName'] = fullName;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayOsApi - functional programming interface
 * @export
 */
export const PayOsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayOsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [courseId] 
         * @param {string} [paymentMethod] 
         * @param {number} [fee] 
         * @param {string} [fullName] 
         * @param {string} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PayOsPost(userId?: string, courseId?: string, paymentMethod?: string, fee?: number, fullName?: string, phoneNumber?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PayOsPost(userId, courseId, paymentMethod, fee, fullName, phoneNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayOsApi.apiV1PayOsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PayOsApi - factory interface
 * @export
 */
export const PayOsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayOsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [courseId] 
         * @param {string} [paymentMethod] 
         * @param {number} [fee] 
         * @param {string} [fullName] 
         * @param {string} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PayOsPost(userId?: string, courseId?: string, paymentMethod?: string, fee?: number, fullName?: string, phoneNumber?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1PayOsPost(userId, courseId, paymentMethod, fee, fullName, phoneNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PayOsApi - object-oriented interface
 * @export
 * @class PayOsApi
 * @extends {BaseAPI}
 */
export class PayOsApi extends BaseAPI {
    /**
     * 
     * @param {string} [userId] 
     * @param {string} [courseId] 
     * @param {string} [paymentMethod] 
     * @param {number} [fee] 
     * @param {string} [fullName] 
     * @param {string} [phoneNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayOsApi
     */
    public apiV1PayOsPost(userId?: string, courseId?: string, paymentMethod?: string, fee?: number, fullName?: string, phoneNumber?: string, options?: RawAxiosRequestConfig) {
        return PayOsApiFp(this.configuration).apiV1PayOsPost(userId, courseId, paymentMethod, fee, fullName, phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [centerName] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ThanhToanGet: async (startDate?: string, endDate?: string, centerName?: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/thanh-toan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (centerName !== undefined) {
                localVarQueryParameter['centerName'] = centerName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ThanhToanIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ThanhToanIdDelete', 'id', id)
            const localVarPath = `/api/v1/thanh-toan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ThanhToanIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ThanhToanIdGet', 'id', id)
            const localVarPath = `/api/v1/thanh-toan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ThanhToanIdPut: async (id: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ThanhToanIdPut', 'id', id)
            const localVarPath = `/api/v1/thanh-toan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [centerName] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ThanhToanGet(startDate?: string, endDate?: string, centerName?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ThanhToanGet(startDate, endDate, centerName, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiV1ThanhToanGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ThanhToanIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ThanhToanIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiV1ThanhToanIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ThanhToanIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ThanhToanIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiV1ThanhToanIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ThanhToanIdPut(id: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ThanhToanIdPut(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiV1ThanhToanIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [centerName] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ThanhToanGet(startDate?: string, endDate?: string, centerName?: string, page?: number, size?: number, options?: any): AxiosPromise<PaymentViewModelListResult> {
            return localVarFp.apiV1ThanhToanGet(startDate, endDate, centerName, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ThanhToanIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1ThanhToanIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ThanhToanIdGet(id: string, options?: any): AxiosPromise<PaymentViewModelResult> {
            return localVarFp.apiV1ThanhToanIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ThanhToanIdPut(id: string, body?: object, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1ThanhToanIdPut(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {string} [centerName] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiV1ThanhToanGet(startDate?: string, endDate?: string, centerName?: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiV1ThanhToanGet(startDate, endDate, centerName, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiV1ThanhToanIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiV1ThanhToanIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiV1ThanhToanIdGet(id: string, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiV1ThanhToanIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiV1ThanhToanIdPut(id: string, body?: object, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiV1ThanhToanIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [centerId] 
         * @param {string} [courseId] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NguoiHocGet: async (centerId?: string, courseId?: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/nguoi-hoc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (centerId !== undefined) {
                localVarQueryParameter['centerId'] = centerId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NguoiHocIdKhoaHocGet: async (id: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1NguoiHocIdKhoaHocGet', 'id', id)
            const localVarPath = `/api/v1/nguoi-hoc/{id}/khoa-hoc`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TrungTamIdKhoaHocGet: async (id: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1TrungTamIdKhoaHocGet', 'id', id)
            const localVarPath = `/api/v1/trung-tam/{id}/khoa-hoc`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1UsersIdDelete', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1UsersIdGet', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdPut: async (id: string, updateUserRequest?: UpdateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1UsersIdPut', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersPost: async (createUserRequest?: CreateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [centerId] 
         * @param {string} [courseId] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NguoiHocGet(centerId?: string, courseId?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCourseDtoPagingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NguoiHocGet(centerId, courseId, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiV1NguoiHocGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NguoiHocIdKhoaHocGet(id: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseByUserDtoPagingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NguoiHocIdKhoaHocGet(id, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiV1NguoiHocIdKhoaHocGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TrungTamIdKhoaHocGet(id: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelPagingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TrungTamIdKhoaHocGet(id, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiV1TrungTamIdKhoaHocGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserViewModelPagingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiV1UsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiV1UsersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserViewModelListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiV1UsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersIdPut(id: string, updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersIdPut(id, updateUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiV1UsersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersPost(createUserRequest?: CreateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserViewModelResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersPost(createUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiV1UsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [centerId] 
         * @param {string} [courseId] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NguoiHocGet(centerId?: string, courseId?: string, page?: number, size?: number, options?: any): AxiosPromise<UserCourseDtoPagingResult> {
            return localVarFp.apiV1NguoiHocGet(centerId, courseId, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NguoiHocIdKhoaHocGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<CourseByUserDtoPagingResult> {
            return localVarFp.apiV1NguoiHocIdKhoaHocGet(id, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TrungTamIdKhoaHocGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<CourseViewModelPagingResult> {
            return localVarFp.apiV1TrungTamIdKhoaHocGet(id, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersGet(page?: number, size?: number, options?: any): AxiosPromise<UserViewModelPagingResult> {
            return localVarFp.apiV1UsersGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1UsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdGet(id: string, options?: any): AxiosPromise<UserViewModelListResult> {
            return localVarFp.apiV1UsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdPut(id: string, updateUserRequest?: UpdateUserRequest, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1UsersIdPut(id, updateUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersPost(createUserRequest?: CreateUserRequest, options?: any): AxiosPromise<UserViewModelResult> {
            return localVarFp.apiV1UsersPost(createUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {string} [centerId] 
     * @param {string} [courseId] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1NguoiHocGet(centerId?: string, courseId?: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1NguoiHocGet(centerId, courseId, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1NguoiHocIdKhoaHocGet(id: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1NguoiHocIdKhoaHocGet(id, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1TrungTamIdKhoaHocGet(id: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1TrungTamIdKhoaHocGet(id, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1UsersGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1UsersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1UsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateUserRequest} [updateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersIdPut(id: string, updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1UsersIdPut(id, updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserRequest} [createUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersPost(createUserRequest?: CreateUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1UsersPost(createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserCourseApi - axios parameter creator
 * @export
 */
export const UserCourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [courseId] 
         * @param {string} [paymentMethod] 
         * @param {number} [fee] 
         * @param {string} [fullName] 
         * @param {string} [phoneNumber] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserCourseJoinGet: async (userId?: string, courseId?: string, paymentMethod?: string, fee?: number, fullName?: string, phoneNumber?: string, status?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/UserCourse/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['paymentMethod'] = paymentMethod;
            }

            if (fee !== undefined) {
                localVarQueryParameter['fee'] = fee;
            }

            if (fullName !== undefined) {
                localVarQueryParameter['fullName'] = fullName;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserCourseApi - functional programming interface
 * @export
 */
export const UserCourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserCourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [courseId] 
         * @param {string} [paymentMethod] 
         * @param {number} [fee] 
         * @param {string} [fullName] 
         * @param {string} [phoneNumber] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserCourseJoinGet(userId?: string, courseId?: string, paymentMethod?: string, fee?: number, fullName?: string, phoneNumber?: string, status?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserCourseJoinGet(userId, courseId, paymentMethod, fee, fullName, phoneNumber, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCourseApi.apiV1UserCourseJoinGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserCourseApi - factory interface
 * @export
 */
export const UserCourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserCourseApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [courseId] 
         * @param {string} [paymentMethod] 
         * @param {number} [fee] 
         * @param {string} [fullName] 
         * @param {string} [phoneNumber] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserCourseJoinGet(userId?: string, courseId?: string, paymentMethod?: string, fee?: number, fullName?: string, phoneNumber?: string, status?: string, options?: any): AxiosPromise<BooleanResult> {
            return localVarFp.apiV1UserCourseJoinGet(userId, courseId, paymentMethod, fee, fullName, phoneNumber, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserCourseApi - object-oriented interface
 * @export
 * @class UserCourseApi
 * @extends {BaseAPI}
 */
export class UserCourseApi extends BaseAPI {
    /**
     * 
     * @param {string} [userId] 
     * @param {string} [courseId] 
     * @param {string} [paymentMethod] 
     * @param {number} [fee] 
     * @param {string} [fullName] 
     * @param {string} [phoneNumber] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCourseApi
     */
    public apiV1UserCourseJoinGet(userId?: string, courseId?: string, paymentMethod?: string, fee?: number, fullName?: string, phoneNumber?: string, status?: string, options?: RawAxiosRequestConfig) {
        return UserCourseApiFp(this.configuration).apiV1UserCourseJoinGet(userId, courseId, paymentMethod, fee, fullName, phoneNumber, status, options).then((request) => request(this.axios, this.basePath));
    }
}



