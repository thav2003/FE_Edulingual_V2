/* tslint:disable */
/* eslint-disable */
/**
 * Edulingual API
 * Edulingual API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base'

/**
 *
 * @export
 * @interface BooleanResult
 */
export interface BooleanResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof BooleanResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof BooleanResult
   */
  message?: string | null
  /**
   *
   * @type {boolean}
   * @memberof BooleanResult
   */
  data?: boolean
}

/**
 *
 * @export
 * @interface CourseAreaDto
 */
export interface CourseAreaDto {
  /**
   *
   * @type {string}
   * @memberof CourseAreaDto
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CourseAreaDto
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseAreaDto
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseAreaDto
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseAreaDto
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof CourseAreaDto
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof CourseAreaDto
   */
  name?: string | null
  /**
   *
   * @type {CourseAreaStatus}
   * @memberof CourseAreaDto
   */
  status?: CourseAreaStatus
}

/**
 *
 * @export
 * @enum {string}
 */

export const CourseAreaStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1
} as const

export type CourseAreaStatus = (typeof CourseAreaStatus)[keyof typeof CourseAreaStatus]

/**
 *
 * @export
 * @interface CourseAreaViewModel
 */
export interface CourseAreaViewModel {
  /**
   *
   * @type {string}
   * @memberof CourseAreaViewModel
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CourseAreaViewModel
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseAreaViewModel
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseAreaViewModel
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseAreaViewModel
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof CourseAreaViewModel
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof CourseAreaViewModel
   */
  name?: string | null
  /**
   *
   * @type {CourseAreaStatus}
   * @memberof CourseAreaViewModel
   */
  status?: CourseAreaStatus
}

/**
 *
 * @export
 * @interface CourseAreaViewModelListResult
 */
export interface CourseAreaViewModelListResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof CourseAreaViewModelListResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof CourseAreaViewModelListResult
   */
  message?: string | null
  /**
   *
   * @type {Array<CourseAreaViewModel>}
   * @memberof CourseAreaViewModelListResult
   */
  data?: Array<CourseAreaViewModel> | null
}

/**
 *
 * @export
 * @interface CourseAreaViewModelResult
 */
export interface CourseAreaViewModelResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof CourseAreaViewModelResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof CourseAreaViewModelResult
   */
  message?: string | null
  /**
   *
   * @type {CourseAreaViewModel}
   * @memberof CourseAreaViewModelResult
   */
  data?: CourseAreaViewModel
}

/**
 *
 * @export
 * @interface CourseCategoryDto
 */
export interface CourseCategoryDto {
  /**
   *
   * @type {string}
   * @memberof CourseCategoryDto
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CourseCategoryDto
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseCategoryDto
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseCategoryDto
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseCategoryDto
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof CourseCategoryDto
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof CourseCategoryDto
   */
  name?: string | null
  /**
   *
   * @type {CourseCategoryStatus}
   * @memberof CourseCategoryDto
   */
  status?: CourseCategoryStatus
}

/**
 *
 * @export
 * @enum {string}
 */

export const CourseCategoryStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1
} as const

export type CourseCategoryStatus = (typeof CourseCategoryStatus)[keyof typeof CourseCategoryStatus]

/**
 *
 * @export
 * @interface CourseCategoryViewModel
 */
export interface CourseCategoryViewModel {
  /**
   *
   * @type {string}
   * @memberof CourseCategoryViewModel
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CourseCategoryViewModel
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseCategoryViewModel
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseCategoryViewModel
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseCategoryViewModel
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof CourseCategoryViewModel
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof CourseCategoryViewModel
   */
  name?: string | null
  /**
   *
   * @type {CourseCategoryStatus}
   * @memberof CourseCategoryViewModel
   */
  status?: CourseCategoryStatus
  /**
   *
   * @type {CourseLanguageDto}
   * @memberof CourseCategoryViewModel
   */
  language?: CourseLanguageDto
}

/**
 *
 * @export
 * @interface CourseCategoryViewModelListResult
 */
export interface CourseCategoryViewModelListResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof CourseCategoryViewModelListResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof CourseCategoryViewModelListResult
   */
  message?: string | null
  /**
   *
   * @type {Array<CourseCategoryViewModel>}
   * @memberof CourseCategoryViewModelListResult
   */
  data?: Array<CourseCategoryViewModel> | null
}

/**
 *
 * @export
 * @interface CourseCategoryViewModelResult
 */
export interface CourseCategoryViewModelResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof CourseCategoryViewModelResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof CourseCategoryViewModelResult
   */
  message?: string | null
  /**
   *
   * @type {CourseCategoryViewModel}
   * @memberof CourseCategoryViewModelResult
   */
  data?: CourseCategoryViewModel
}

/**
 *
 * @export
 * @interface CourseDto
 */
export interface CourseDto {
  /**
   *
   * @type {string}
   * @memberof CourseDto
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CourseDto
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseDto
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseDto
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseDto
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof CourseDto
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof CourseDto
   */
  title?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseDto
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseDto
   */
  duration?: string | null
  /**
   *
   * @type {number}
   * @memberof CourseDto
   */
  tuitionFee?: number
}
/**
 *
 * @export
 * @interface CourseDtoListResult
 */
export interface CourseDtoListResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof CourseDtoListResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof CourseDtoListResult
   */
  message?: string | null
  /**
   *
   * @type {Array<CourseDto>}
   * @memberof CourseDtoListResult
   */
  data?: Array<CourseDto> | null
}

/**
 *
 * @export
 * @interface CourseLanguageDto
 */
export interface CourseLanguageDto {
  /**
   *
   * @type {string}
   * @memberof CourseLanguageDto
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CourseLanguageDto
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseLanguageDto
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseLanguageDto
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseLanguageDto
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof CourseLanguageDto
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof CourseLanguageDto
   */
  name?: string | null
  /**
   *
   * @type {CourseLanguageStatus}
   * @memberof CourseLanguageDto
   */
  status?: CourseLanguageStatus
}

/**
 *
 * @export
 * @enum {string}
 */

export const CourseLanguageStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1
} as const

export type CourseLanguageStatus = (typeof CourseLanguageStatus)[keyof typeof CourseLanguageStatus]

/**
 *
 * @export
 * @interface CourseLanguageViewModel
 */
export interface CourseLanguageViewModel {
  /**
   *
   * @type {string}
   * @memberof CourseLanguageViewModel
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CourseLanguageViewModel
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseLanguageViewModel
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseLanguageViewModel
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseLanguageViewModel
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof CourseLanguageViewModel
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof CourseLanguageViewModel
   */
  name?: string | null
  /**
   *
   * @type {CourseLanguageStatus}
   * @memberof CourseLanguageViewModel
   */
  status?: CourseLanguageStatus
}

/**
 *
 * @export
 * @interface CourseLanguageViewModelListResult
 */
export interface CourseLanguageViewModelListResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof CourseLanguageViewModelListResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof CourseLanguageViewModelListResult
   */
  message?: string | null
  /**
   *
   * @type {Array<CourseLanguageViewModel>}
   * @memberof CourseLanguageViewModelListResult
   */
  data?: Array<CourseLanguageViewModel> | null
}

/**
 *
 * @export
 * @interface CourseLanguageViewModelResult
 */
export interface CourseLanguageViewModelResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof CourseLanguageViewModelResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof CourseLanguageViewModelResult
   */
  message?: string | null
  /**
   *
   * @type {CourseLanguageViewModel}
   * @memberof CourseLanguageViewModelResult
   */
  data?: CourseLanguageViewModel
}

/**
 *
 * @export
 * @enum {string}
 */

export const CourseStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1
} as const

export type CourseStatus = (typeof CourseStatus)[keyof typeof CourseStatus]

/**
 *
 * @export
 * @interface CourseViewModel
 */
export interface CourseViewModel {
  /**
   *
   * @type {string}
   * @memberof CourseViewModel
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CourseViewModel
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseViewModel
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof CourseViewModel
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseViewModel
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof CourseViewModel
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof CourseViewModel
   */
  title?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseViewModel
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof CourseViewModel
   */
  duration?: string | null
  /**
   *
   * @type {number}
   * @memberof CourseViewModel
   */
  tuitionFee?: number
  /**
   *
   * @type {CourseAreaDto}
   * @memberof CourseViewModel
   */
  courseArea?: CourseAreaDto
  /**
   *
   * @type {CourseLanguageDto}
   * @memberof CourseViewModel
   */
  courseLanguage?: CourseLanguageDto
  /**
   *
   * @type {CourseCategoryDto}
   * @memberof CourseViewModel
   */
  courseCategory?: CourseCategoryDto
  /**
   *
   * @type {UserDto}
   * @memberof CourseViewModel
   */
  center?: UserDto
}
/**
 *
 * @export
 * @interface CourseViewModelListResult
 */
export interface CourseViewModelListResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof CourseViewModelListResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof CourseViewModelListResult
   */
  message?: string | null
  /**
   *
   * @type {Array<CourseViewModel>}
   * @memberof CourseViewModelListResult
   */
  data?: Array<CourseViewModel> | null
}

/**
 *
 * @export
 * @interface CourseViewModelResult
 */
export interface CourseViewModelResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof CourseViewModelResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof CourseViewModelResult
   */
  message?: string | null
  /**
   *
   * @type {CourseViewModel}
   * @memberof CourseViewModelResult
   */
  data?: CourseViewModel
}

/**
 *
 * @export
 * @interface CreateCourseAreaRequest
 */
export interface CreateCourseAreaRequest {
  /**
   *
   * @type {string}
   * @memberof CreateCourseAreaRequest
   */
  name: string
  /**
   *
   * @type {CourseAreaStatus}
   * @memberof CreateCourseAreaRequest
   */
  status?: CourseAreaStatus
}

/**
 *
 * @export
 * @interface CreateCourseCategoryRequest
 */
export interface CreateCourseCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof CreateCourseCategoryRequest
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof CreateCourseCategoryRequest
   */
  languageId: string
  /**
   *
   * @type {CourseCategoryStatus}
   * @memberof CreateCourseCategoryRequest
   */
  status?: CourseCategoryStatus
}

/**
 *
 * @export
 * @interface CreateCourseLanguageRequest
 */
export interface CreateCourseLanguageRequest {
  /**
   *
   * @type {string}
   * @memberof CreateCourseLanguageRequest
   */
  name: string
  /**
   *
   * @type {CourseLanguageStatus}
   * @memberof CreateCourseLanguageRequest
   */
  status?: CourseLanguageStatus
}

/**
 *
 * @export
 * @interface CreateCourseRequest
 */
export interface CreateCourseRequest {
  /**
   *
   * @type {string}
   * @memberof CreateCourseRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof CreateCourseRequest
   */
  description: string
  /**
   *
   * @type {string}
   * @memberof CreateCourseRequest
   */
  duration: string
  /**
   *
   * @type {number}
   * @memberof CreateCourseRequest
   */
  tuitionfee: number
  /**
   *
   * @type {string}
   * @memberof CreateCourseRequest
   */
  centerId: string
  /**
   *
   * @type {string}
   * @memberof CreateCourseRequest
   */
  courseAreaId: string
  /**
   *
   * @type {string}
   * @memberof CreateCourseRequest
   */
  courseLanguageId: string
  /**
   *
   * @type {string}
   * @memberof CreateCourseRequest
   */
  courseCategoryId: string
  /**
   *
   * @type {CourseStatus}
   * @memberof CreateCourseRequest
   */
  status?: CourseStatus
}

/**
 *
 * @export
 * @interface CreateFeedbackRequest
 */
export interface CreateFeedbackRequest {
  /**
   *
   * @type {string}
   * @memberof CreateFeedbackRequest
   */
  description: string
  /**
   *
   * @type {number}
   * @memberof CreateFeedbackRequest
   */
  rating?: number | null
  /**
   *
   * @type {string}
   * @memberof CreateFeedbackRequest
   */
  userId: string
}
/**
 *
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
  /**
   *
   * @type {string}
   * @memberof CreateUserRequest
   */
  userName: string
  /**
   *
   * @type {string}
   * @memberof CreateUserRequest
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof CreateUserRequest
   */
  fullName: string
  /**
   *
   * @type {string}
   * @memberof CreateUserRequest
   */
  description?: string | null
  /**
   *
   * @type {UserStatus}
   * @memberof CreateUserRequest
   */
  email?: string
  imageUrl?: string
  userStatus?: UserStatus
  /**
   *
   * @type {string}
   * @memberof CreateUserRequest
   */
  roleId: string
}

/**
 *
 * @export
 * @enum {string}
 */

export const FeedbackStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2
} as const

export type FeedbackStatus = (typeof FeedbackStatus)[keyof typeof FeedbackStatus]

/**
 *
 * @export
 * @interface FeedbackViewModel
 */
export interface FeedbackViewModel {
  /**
   *
   * @type {string}
   * @memberof FeedbackViewModel
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof FeedbackViewModel
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof FeedbackViewModel
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof FeedbackViewModel
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof FeedbackViewModel
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof FeedbackViewModel
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof FeedbackViewModel
   */
  description?: string | null
  /**
   *
   * @type {number}
   * @memberof FeedbackViewModel
   */
  rating?: number | null
  /**
   *
   * @type {FeedbackStatus}
   * @memberof FeedbackViewModel
   */
  feedbackStatus?: FeedbackStatus
  /**
   *
   * @type {UserDto}
   * @memberof FeedbackViewModel
   */
  user?: UserDto
}

/**
 *
 * @export
 * @interface FeedbackViewModelResult
 */
export interface FeedbackViewModelResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof FeedbackViewModelResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof FeedbackViewModelResult
   */
  message?: string | null
  /**
   *
   * @type {FeedbackViewModel}
   * @memberof FeedbackViewModelResult
   */
  data?: FeedbackViewModel
}

/**
 *
 * @export
 * @interface GoogleLoginRequest
 */
export interface GoogleLoginRequest {
  /**
   *
   * @type {string}
   * @memberof GoogleLoginRequest
   */
  accessToken: string
}
/**
 *
 * @export
 * @enum {string}
 */

export const HttpStatusCode = {
  NUMBER_100: 100,
  NUMBER_101: 101,
  NUMBER_102: 102,
  NUMBER_103: 103,
  NUMBER_200: 200,
  NUMBER_201: 201,
  NUMBER_202: 202,
  NUMBER_203: 203,
  NUMBER_204: 204,
  NUMBER_205: 205,
  NUMBER_206: 206,
  NUMBER_207: 207,
  NUMBER_208: 208,
  NUMBER_226: 226,
  NUMBER_300: 300,
  NUMBER_301: 301,
  NUMBER_302: 302,
  NUMBER_303: 303,
  NUMBER_304: 304,
  NUMBER_305: 305,
  NUMBER_306: 306,
  NUMBER_307: 307,
  NUMBER_308: 308,
  NUMBER_400: 400,
  NUMBER_401: 401,
  NUMBER_402: 402,
  NUMBER_403: 403,
  NUMBER_404: 404,
  NUMBER_405: 405,
  NUMBER_406: 406,
  NUMBER_407: 407,
  NUMBER_408: 408,
  NUMBER_409: 409,
  NUMBER_410: 410,
  NUMBER_411: 411,
  NUMBER_412: 412,
  NUMBER_413: 413,
  NUMBER_414: 414,
  NUMBER_415: 415,
  NUMBER_416: 416,
  NUMBER_417: 417,
  NUMBER_421: 421,
  NUMBER_422: 422,
  NUMBER_423: 423,
  NUMBER_424: 424,
  NUMBER_426: 426,
  NUMBER_428: 428,
  NUMBER_429: 429,
  NUMBER_431: 431,
  NUMBER_451: 451,
  NUMBER_500: 500,
  NUMBER_501: 501,
  NUMBER_502: 502,
  NUMBER_503: 503,
  NUMBER_504: 504,
  NUMBER_505: 505,
  NUMBER_506: 506,
  NUMBER_507: 507,
  NUMBER_508: 508,
  NUMBER_510: 510,
  NUMBER_511: 511
} as const

export type HttpStatusCode = (typeof HttpStatusCode)[keyof typeof HttpStatusCode]

/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  username: string
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  password: string
}
/**
 *
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  accessToken?: string | null
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  username?: string | null
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  name?: string | null
  /**
   *
   * @type {RoleEnum}
   * @memberof LoginResponse
   */
  role?: RoleEnum
  /**
   *
   * @type {UserStatus}
   * @memberof LoginResponse
   */
  status?: UserStatus
}

/**
 *
 * @export
 * @interface LoginResponseResult
 */
export interface LoginResponseResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof LoginResponseResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof LoginResponseResult
   */
  message?: string | null
  /**
   *
   * @type {LoginResponse}
   * @memberof LoginResponseResult
   */
  data?: LoginResponse
}

/**
 *
 * @export
 * @interface PaymentViewModel
 */
export interface PaymentViewModel {
  /**
   *
   * @type {string}
   * @memberof PaymentViewModel
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof PaymentViewModel
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof PaymentViewModel
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof PaymentViewModel
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof PaymentViewModel
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof PaymentViewModel
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof PaymentViewModel
   */
  paymentMethod?: string | null
  /**
   *
   * @type {number}
   * @memberof PaymentViewModel
   */
  fee?: number
  /**
   *
   * @type {CourseDto}
   * @memberof PaymentViewModel
   */
  course?: CourseDto
  /**
   *
   * @type {UserDto}
   * @memberof PaymentViewModel
   */
  user?: UserDto
}
/**
 *
 * @export
 * @interface PaymentViewModelListResult
 */
export interface PaymentViewModelListResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof PaymentViewModelListResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof PaymentViewModelListResult
   */
  message?: string | null
  /**
   *
   * @type {Array<PaymentViewModel>}
   * @memberof PaymentViewModelListResult
   */
  data?: Array<PaymentViewModel> | null
}

/**
 *
 * @export
 * @interface PaymentViewModelResult
 */
export interface PaymentViewModelResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof PaymentViewModelResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof PaymentViewModelResult
   */
  message?: string | null
  /**
   *
   * @type {PaymentViewModel}
   * @memberof PaymentViewModelResult
   */
  data?: PaymentViewModel
}

/**
 *
 * @export
 * @interface RoleDto
 */
export interface RoleDto {
  /**
   *
   * @type {string}
   * @memberof RoleDto
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof RoleDto
   */
  roleName?: string | null
}
/**
 *
 * @export
 * @enum {string}
 */

export const RoleEnum = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2
} as const

export type RoleEnum = (typeof RoleEnum)[keyof typeof RoleEnum]

/**
 *
 * @export
 * @interface UpdateCourseAreaRequest
 */
export interface UpdateCourseAreaRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateCourseAreaRequest
   */
  name?: string | null
  /**
   *
   * @type {CourseAreaStatus}
   * @memberof UpdateCourseAreaRequest
   */
  status?: CourseAreaStatus
}

/**
 *
 * @export
 * @interface UpdateCourseCategoryRequest
 */
export interface UpdateCourseCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateCourseCategoryRequest
   */
  name?: string | null
  /**
   *
   * @type {string}
   * @memberof UpdateCourseCategoryRequest
   */
  languageId?: string | null
  /**
   *
   * @type {CourseCategoryStatus}
   * @memberof UpdateCourseCategoryRequest
   */
  status?: CourseCategoryStatus
}

/**
 *
 * @export
 * @interface UpdateCourseLanguageRequest
 */
export interface UpdateCourseLanguageRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateCourseLanguageRequest
   */
  name?: string | null
  /**
   *
   * @type {CourseLanguageStatus}
   * @memberof UpdateCourseLanguageRequest
   */
  status?: CourseLanguageStatus
}

/**
 *
 * @export
 * @interface UpdateCourseRequest
 */
export interface UpdateCourseRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateCourseRequest
   */
  title?: string | null
  /**
   *
   * @type {string}
   * @memberof UpdateCourseRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof UpdateCourseRequest
   */
  duration?: string | null
  /**
   *
   * @type {number}
   * @memberof UpdateCourseRequest
   */
  tuitionfee?: number | null
  /**
   *
   * @type {string}
   * @memberof UpdateCourseRequest
   */
  centerId?: string | null
  /**
   *
   * @type {string}
   * @memberof UpdateCourseRequest
   */
  courseAreaId?: string | null
  /**
   *
   * @type {string}
   * @memberof UpdateCourseRequest
   */
  courseLanguageId?: string | null
  /**
   *
   * @type {string}
   * @memberof UpdateCourseRequest
   */
  courseCategoryId?: string | null
  /**
   *
   * @type {CourseStatus}
   * @memberof UpdateCourseRequest
   */
  status?: CourseStatus
}

/**
 *
 * @export
 * @interface UpdateFeedbackRequest
 */
export interface UpdateFeedbackRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateFeedbackRequest
   */
  description?: string | null
  /**
   *
   * @type {number}
   * @memberof UpdateFeedbackRequest
   */
  rating?: number | null
  /**
   *
   * @type {FeedbackStatus}
   * @memberof UpdateFeedbackRequest
   */
  feedbackStatus?: FeedbackStatus
  /**
   *
   * @type {string}
   * @memberof UpdateFeedbackRequest
   */
  userId?: string | null
}

/**
 *
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateUserRequest
   */
  userName?: string | null
  /**
   *
   * @type {string}
   * @memberof UpdateUserRequest
   */
  password?: string | null
  /**
   *
   * @type {string}
   * @memberof UpdateUserRequest
   */
  fullName?: string | null
  /**
   *
   * @type {string}
   * @memberof UpdateUserRequest
   */
  description?: string | null
  /**
   *
   * @type {UserStatus}
   * @memberof UpdateUserRequest
   */
  userStatus?: UserStatus
  /**
   *
   * @type {string}
   * @memberof UpdateUserRequest
   */
  roleId?: string | null
}

/**
 *
 * @export
 * @interface UserCourseDto
 */
export interface UserCourseDto {
  /**
   *
   * @type {string}
   * @memberof UserCourseDto
   */
  userName?: string | null
  /**
   *
   * @type {string}
   * @memberof UserCourseDto
   */
  fullName?: string | null
  /**
   *
   * @type {string}
   * @memberof UserCourseDto
   */
  description?: string | null
}
/**
 *
 * @export
 * @interface UserCourseDtoListResult
 */
export interface UserCourseDtoListResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof UserCourseDtoListResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof UserCourseDtoListResult
   */
  message?: string | null
  /**
   *
   * @type {Array<UserCourseDto>}
   * @memberof UserCourseDtoListResult
   */
  data?: Array<UserCourseDto> | null
}

/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof UserDto
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  userName?: string | null
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  password?: string | null
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  fullName?: string | null
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  description?: string | null
  /**
   *
   * @type {UserStatus}
   * @memberof UserDto
   */
  status?: UserStatus
}

/**
 *
 * @export
 * @enum {string}
 */

export const UserStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2
} as const

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]

/**
 *
 * @export
 * @interface UserViewModel
 */
export interface UserViewModel {
  /**
   *
   * @type {string}
   * @memberof UserViewModel
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof UserViewModel
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof UserViewModel
   */
  updatedAt?: string
  /**
   *
   * @type {string}
   * @memberof UserViewModel
   */
  createdBy?: string | null
  /**
   *
   * @type {string}
   * @memberof UserViewModel
   */
  updatedBy?: string | null
  /**
   *
   * @type {boolean}
   * @memberof UserViewModel
   */
  isDeleted?: boolean
  /**
   *
   * @type {string}
   * @memberof UserViewModel
   */
  userName?: string | null
  /**
   *
   * @type {string}
   * @memberof UserViewModel
   */
  password?: string | null
  /**
   *
   * @type {string}
   * @memberof UserViewModel
   */
  fullName?: string | null
  /**
   *
   * @type {string}
   * @memberof UserViewModel
   */
  description?: string | null
  /**
   *
   * @type {UserStatus}
   * @memberof UserViewModel
   */
  status?: UserStatus
  /**
   *
   * @type {RoleDto}
   * @memberof UserViewModel
   */
  role?: RoleDto
}

/**
 *
 * @export
 * @interface UserViewModelListResult
 */
export interface UserViewModelListResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof UserViewModelListResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof UserViewModelListResult
   */
  message?: string | null
  /**
   *
   * @type {Array<UserViewModel>}
   * @memberof UserViewModelListResult
   */
  data?: Array<UserViewModel> | null
}

/**
 *
 * @export
 * @interface UserViewModelResult
 */
export interface UserViewModelResult {
  /**
   *
   * @type {HttpStatusCode}
   * @memberof UserViewModelResult
   */
  statusCode?: HttpStatusCode
  /**
   *
   * @type {string}
   * @memberof UserViewModelResult
   */
  message?: string | null
  /**
   *
   * @type {UserViewModel}
   * @memberof UserViewModelResult
   */
  data?: UserViewModel
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {GoogleLoginRequest} [googleLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GoogleLoginPut: async (
      googleLoginRequest?: GoogleLoginRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/google/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(googleLoginRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoginPut: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {GoogleLoginRequest} [googleLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1GoogleLoginPut(
      googleLoginRequest?: GoogleLoginRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GoogleLoginPut(googleLoginRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.apiV1GoogleLoginPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1LoginPut(
      loginRequest?: LoginRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoginPut(loginRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.apiV1LoginPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthenticationApiFp(configuration)
  return {
    /**
     *
     * @param {GoogleLoginRequest} [googleLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GoogleLoginPut(googleLoginRequest?: GoogleLoginRequest, options?: any): AxiosPromise<LoginResponseResult> {
      return localVarFp.apiV1GoogleLoginPut(googleLoginRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoginPut(loginRequest?: LoginRequest, options?: any): AxiosPromise<LoginResponseResult> {
      return localVarFp.apiV1LoginPut(loginRequest, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
  /**
   *
   * @param {GoogleLoginRequest} [googleLoginRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public apiV1GoogleLoginPut(googleLoginRequest?: GoogleLoginRequest, options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .apiV1GoogleLoginPut(googleLoginRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {LoginRequest} [loginRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public apiV1LoginPut(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .apiV1LoginPut(loginRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} [areaId]
     * @param {string} [languageId]
     * @param {string} [categoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocGet: async (
      areaId?: string,
      languageId?: string,
      categoryId?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/khoa-hoc`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (areaId !== undefined) {
        localVarQueryParameter['AreaId'] = areaId
      }

      if (languageId !== undefined) {
        localVarQueryParameter['LanguageId'] = languageId
      }

      if (categoryId !== undefined) {
        localVarQueryParameter['CategoryId'] = categoryId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1KhoaHocIdDelete', 'id', id)
      const localVarPath = `/api/v1/khoa-hoc/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1KhoaHocIdGet', 'id', id)
      const localVarPath = `/api/v1/khoa-hoc/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocIdNguoiHocGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1KhoaHocIdNguoiHocGet', 'id', id)
      const localVarPath = `/api/v1/khoa-hoc/{id}/nguoi-hoc`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseRequest} [updateCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocIdPut: async (
      id: string,
      updateCourseRequest?: UpdateCourseRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1KhoaHocIdPut', 'id', id)
      const localVarPath = `/api/v1/khoa-hoc/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(updateCourseRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocPagingGet: async (
      page?: number,
      size?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/khoa-hoc-paging`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {CreateCourseRequest} [createCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocPost: async (
      createCourseRequest?: CreateCourseRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/khoa-hoc`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createCourseRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} [areaId]
     * @param {string} [languageId]
     * @param {string} [categoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhoaHocGet(
      areaId?: string,
      languageId?: string,
      categoryId?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocGet(areaId, languageId, categoryId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseApi.apiV1KhoaHocGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhoaHocIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseApi.apiV1KhoaHocIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhoaHocIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseApi.apiV1KhoaHocIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhoaHocIdNguoiHocGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCourseDtoListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocIdNguoiHocGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseApi.apiV1KhoaHocIdNguoiHocGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseRequest} [updateCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhoaHocIdPut(
      id: string,
      updateCourseRequest?: UpdateCourseRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocIdPut(id, updateCourseRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseApi.apiV1KhoaHocIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhoaHocPagingGet(
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocPagingGet(page, size, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseApi.apiV1KhoaHocPagingGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {CreateCourseRequest} [createCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhoaHocPost(
      createCourseRequest?: CreateCourseRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhoaHocPost(createCourseRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseApi.apiV1KhoaHocPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = CourseApiFp(configuration)
  return {
    /**
     *
     * @param {string} [areaId]
     * @param {string} [languageId]
     * @param {string} [categoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocGet(
      areaId?: string,
      languageId?: string,
      categoryId?: string,
      options?: any
    ): AxiosPromise<CourseViewModelListResult> {
      return localVarFp
        .apiV1KhoaHocGet(areaId, languageId, categoryId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1KhoaHocIdDelete(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocIdGet(id: string, options?: any): AxiosPromise<CourseViewModelResult> {
      return localVarFp.apiV1KhoaHocIdGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocIdNguoiHocGet(id: string, options?: any): AxiosPromise<UserCourseDtoListResult> {
      return localVarFp.apiV1KhoaHocIdNguoiHocGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseRequest} [updateCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocIdPut(
      id: string,
      updateCourseRequest?: UpdateCourseRequest,
      options?: any
    ): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1KhoaHocIdPut(id, updateCourseRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocPagingGet(page?: number, size?: number, options?: any): AxiosPromise<CourseViewModelListResult> {
      return localVarFp.apiV1KhoaHocPagingGet(page, size, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {CreateCourseRequest} [createCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhoaHocPost(createCourseRequest?: CreateCourseRequest, options?: any): AxiosPromise<CourseViewModelResult> {
      return localVarFp.apiV1KhoaHocPost(createCourseRequest, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI {
  /**
   *
   * @param {string} [areaId]
   * @param {string} [languageId]
   * @param {string} [categoryId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public apiV1KhoaHocGet(areaId?: string, languageId?: string, categoryId?: string, options?: RawAxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .apiV1KhoaHocGet(areaId, languageId, categoryId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public apiV1KhoaHocIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .apiV1KhoaHocIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public apiV1KhoaHocIdGet(id: string, options?: RawAxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .apiV1KhoaHocIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public apiV1KhoaHocIdNguoiHocGet(id: string, options?: RawAxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .apiV1KhoaHocIdNguoiHocGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {UpdateCourseRequest} [updateCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public apiV1KhoaHocIdPut(id: string, updateCourseRequest?: UpdateCourseRequest, options?: RawAxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .apiV1KhoaHocIdPut(id, updateCourseRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public apiV1KhoaHocPagingGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .apiV1KhoaHocPagingGet(page, size, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {CreateCourseRequest} [createCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public apiV1KhoaHocPost(createCourseRequest?: CreateCourseRequest, options?: RawAxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .apiV1KhoaHocPost(createCourseRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CourseAreaApi - axios parameter creator
 * @export
 */
export const CourseAreaApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/khu-vuc`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1KhuVucIdDelete', 'id', id)
      const localVarPath = `/api/v1/khu-vuc/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1KhuVucIdGet', 'id', id)
      const localVarPath = `/api/v1/khu-vuc/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseAreaRequest} [updateCourseAreaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucIdPut: async (
      id: string,
      updateCourseAreaRequest?: UpdateCourseAreaRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1KhuVucIdPut', 'id', id)
      const localVarPath = `/api/v1/khu-vuc/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseAreaRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {CreateCourseAreaRequest} [createCourseAreaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucPost: async (
      createCourseAreaRequest?: CreateCourseAreaRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/khu-vuc`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseAreaRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * CourseAreaApi - functional programming interface
 * @export
 */
export const CourseAreaApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseAreaApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhuVucGet(
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseAreaViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucGet(page, size, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseAreaApi.apiV1KhuVucGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhuVucIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseAreaApi.apiV1KhuVucIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhuVucIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseAreaViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseAreaApi.apiV1KhuVucIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseAreaRequest} [updateCourseAreaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhuVucIdPut(
      id: string,
      updateCourseAreaRequest?: UpdateCourseAreaRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucIdPut(id, updateCourseAreaRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseAreaApi.apiV1KhuVucIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {CreateCourseAreaRequest} [createCourseAreaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1KhuVucPost(
      createCourseAreaRequest?: CreateCourseAreaRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseAreaViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1KhuVucPost(createCourseAreaRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseAreaApi.apiV1KhuVucPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * CourseAreaApi - factory interface
 * @export
 */
export const CourseAreaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = CourseAreaApiFp(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucGet(page?: number, size?: number, options?: any): AxiosPromise<CourseAreaViewModelListResult> {
      return localVarFp.apiV1KhuVucGet(page, size, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1KhuVucIdDelete(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucIdGet(id: string, options?: any): AxiosPromise<CourseAreaViewModelListResult> {
      return localVarFp.apiV1KhuVucIdGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseAreaRequest} [updateCourseAreaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucIdPut(
      id: string,
      updateCourseAreaRequest?: UpdateCourseAreaRequest,
      options?: any
    ): AxiosPromise<BooleanResult> {
      return localVarFp
        .apiV1KhuVucIdPut(id, updateCourseAreaRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {CreateCourseAreaRequest} [createCourseAreaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1KhuVucPost(
      createCourseAreaRequest?: CreateCourseAreaRequest,
      options?: any
    ): AxiosPromise<CourseAreaViewModelResult> {
      return localVarFp.apiV1KhuVucPost(createCourseAreaRequest, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * CourseAreaApi - object-oriented interface
 * @export
 * @class CourseAreaApi
 * @extends {BaseAPI}
 */
export class CourseAreaApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAreaApi
   */
  public apiV1KhuVucGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
    return CourseAreaApiFp(this.configuration)
      .apiV1KhuVucGet(page, size, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAreaApi
   */
  public apiV1KhuVucIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return CourseAreaApiFp(this.configuration)
      .apiV1KhuVucIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAreaApi
   */
  public apiV1KhuVucIdGet(id: string, options?: RawAxiosRequestConfig) {
    return CourseAreaApiFp(this.configuration)
      .apiV1KhuVucIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {UpdateCourseAreaRequest} [updateCourseAreaRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAreaApi
   */
  public apiV1KhuVucIdPut(
    id: string,
    updateCourseAreaRequest?: UpdateCourseAreaRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CourseAreaApiFp(this.configuration)
      .apiV1KhuVucIdPut(id, updateCourseAreaRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {CreateCourseAreaRequest} [createCourseAreaRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAreaApi
   */
  public apiV1KhuVucPost(createCourseAreaRequest?: CreateCourseAreaRequest, options?: RawAxiosRequestConfig) {
    return CourseAreaApiFp(this.configuration)
      .apiV1KhuVucPost(createCourseAreaRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CourseCategoryApi - axios parameter creator
 * @export
 */
export const CourseCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocGet: async (
      page?: number,
      size?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/loai-khoa-hoc`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1LoaiKhoaHocIdDelete', 'id', id)
      const localVarPath = `/api/v1/loai-khoa-hoc/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1LoaiKhoaHocIdGet', 'id', id)
      const localVarPath = `/api/v1/loai-khoa-hoc/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseCategoryRequest} [updateCourseCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocIdPut: async (
      id: string,
      updateCourseCategoryRequest?: UpdateCourseCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1LoaiKhoaHocIdPut', 'id', id)
      const localVarPath = `/api/v1/loai-khoa-hoc/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseCategoryRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {CreateCourseCategoryRequest} [createCourseCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocPost: async (
      createCourseCategoryRequest?: CreateCourseCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/loai-khoa-hoc`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseCategoryRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * CourseCategoryApi - functional programming interface
 * @export
 */
export const CourseCategoryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseCategoryApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1LoaiKhoaHocGet(
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCategoryViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocGet(page, size, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1LoaiKhoaHocIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1LoaiKhoaHocIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCategoryViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseCategoryRequest} [updateCourseCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1LoaiKhoaHocIdPut(
      id: string,
      updateCourseCategoryRequest?: UpdateCourseCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocIdPut(
        id,
        updateCourseCategoryRequest,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {CreateCourseCategoryRequest} [createCourseCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1LoaiKhoaHocPost(
      createCourseCategoryRequest?: CreateCourseCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCategoryViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoaiKhoaHocPost(
        createCourseCategoryRequest,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseCategoryApi.apiV1LoaiKhoaHocPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * CourseCategoryApi - factory interface
 * @export
 */
export const CourseCategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseCategoryApiFp(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocGet(page?: number, size?: number, options?: any): AxiosPromise<CourseCategoryViewModelListResult> {
      return localVarFp.apiV1LoaiKhoaHocGet(page, size, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1LoaiKhoaHocIdDelete(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocIdGet(id: string, options?: any): AxiosPromise<CourseCategoryViewModelListResult> {
      return localVarFp.apiV1LoaiKhoaHocIdGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseCategoryRequest} [updateCourseCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocIdPut(
      id: string,
      updateCourseCategoryRequest?: UpdateCourseCategoryRequest,
      options?: any
    ): AxiosPromise<BooleanResult> {
      return localVarFp
        .apiV1LoaiKhoaHocIdPut(id, updateCourseCategoryRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {CreateCourseCategoryRequest} [createCourseCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoaiKhoaHocPost(
      createCourseCategoryRequest?: CreateCourseCategoryRequest,
      options?: any
    ): AxiosPromise<CourseCategoryViewModelResult> {
      return localVarFp
        .apiV1LoaiKhoaHocPost(createCourseCategoryRequest, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * CourseCategoryApi - object-oriented interface
 * @export
 * @class CourseCategoryApi
 * @extends {BaseAPI}
 */
export class CourseCategoryApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseCategoryApi
   */
  public apiV1LoaiKhoaHocGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
    return CourseCategoryApiFp(this.configuration)
      .apiV1LoaiKhoaHocGet(page, size, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseCategoryApi
   */
  public apiV1LoaiKhoaHocIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return CourseCategoryApiFp(this.configuration)
      .apiV1LoaiKhoaHocIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseCategoryApi
   */
  public apiV1LoaiKhoaHocIdGet(id: string, options?: RawAxiosRequestConfig) {
    return CourseCategoryApiFp(this.configuration)
      .apiV1LoaiKhoaHocIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {UpdateCourseCategoryRequest} [updateCourseCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseCategoryApi
   */
  public apiV1LoaiKhoaHocIdPut(
    id: string,
    updateCourseCategoryRequest?: UpdateCourseCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CourseCategoryApiFp(this.configuration)
      .apiV1LoaiKhoaHocIdPut(id, updateCourseCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {CreateCourseCategoryRequest} [createCourseCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseCategoryApi
   */
  public apiV1LoaiKhoaHocPost(
    createCourseCategoryRequest?: CreateCourseCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CourseCategoryApiFp(this.configuration)
      .apiV1LoaiKhoaHocPost(createCourseCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CourseLanguageApi - axios parameter creator
 * @export
 */
export const CourseLanguageApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguGet: async (
      page?: number,
      size?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/ngon-ngu`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1NgonNguIdDelete', 'id', id)
      const localVarPath = `/api/v1/ngon-ngu/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1NgonNguIdGet', 'id', id)
      const localVarPath = `/api/v1/ngon-ngu/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguIdLoaiKhoaHocGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1NgonNguIdLoaiKhoaHocGet', 'id', id)
      const localVarPath = `/api/v1/ngon-ngu/{id}/loai-khoa-hoc`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseLanguageRequest} [updateCourseLanguageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguIdPut: async (
      id: string,
      updateCourseLanguageRequest?: UpdateCourseLanguageRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1NgonNguIdPut', 'id', id)
      const localVarPath = `/api/v1/ngon-ngu/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseLanguageRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {CreateCourseLanguageRequest} [createCourseLanguageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguPost: async (
      createCourseLanguageRequest?: CreateCourseLanguageRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/ngon-ngu`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseLanguageRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * CourseLanguageApi - functional programming interface
 * @export
 */
export const CourseLanguageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseLanguageApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1NgonNguGet(
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseLanguageViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguGet(page, size, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseLanguageApi.apiV1NgonNguGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1NgonNguIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseLanguageApi.apiV1NgonNguIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1NgonNguIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseLanguageViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseLanguageApi.apiV1NgonNguIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1NgonNguIdLoaiKhoaHocGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCategoryViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguIdLoaiKhoaHocGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseLanguageApi.apiV1NgonNguIdLoaiKhoaHocGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseLanguageRequest} [updateCourseLanguageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1NgonNguIdPut(
      id: string,
      updateCourseLanguageRequest?: UpdateCourseLanguageRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguIdPut(
        id,
        updateCourseLanguageRequest,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseLanguageApi.apiV1NgonNguIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {CreateCourseLanguageRequest} [createCourseLanguageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1NgonNguPost(
      createCourseLanguageRequest?: CreateCourseLanguageRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseLanguageViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NgonNguPost(createCourseLanguageRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CourseLanguageApi.apiV1NgonNguPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * CourseLanguageApi - factory interface
 * @export
 */
export const CourseLanguageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseLanguageApiFp(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguGet(page?: number, size?: number, options?: any): AxiosPromise<CourseLanguageViewModelListResult> {
      return localVarFp.apiV1NgonNguGet(page, size, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1NgonNguIdDelete(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguIdGet(id: string, options?: any): AxiosPromise<CourseLanguageViewModelResult> {
      return localVarFp.apiV1NgonNguIdGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguIdLoaiKhoaHocGet(id: string, options?: any): AxiosPromise<CourseCategoryViewModelListResult> {
      return localVarFp.apiV1NgonNguIdLoaiKhoaHocGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCourseLanguageRequest} [updateCourseLanguageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguIdPut(
      id: string,
      updateCourseLanguageRequest?: UpdateCourseLanguageRequest,
      options?: any
    ): AxiosPromise<BooleanResult> {
      return localVarFp
        .apiV1NgonNguIdPut(id, updateCourseLanguageRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {CreateCourseLanguageRequest} [createCourseLanguageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NgonNguPost(
      createCourseLanguageRequest?: CreateCourseLanguageRequest,
      options?: any
    ): AxiosPromise<CourseLanguageViewModelResult> {
      return localVarFp
        .apiV1NgonNguPost(createCourseLanguageRequest, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * CourseLanguageApi - object-oriented interface
 * @export
 * @class CourseLanguageApi
 * @extends {BaseAPI}
 */
export class CourseLanguageApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseLanguageApi
   */
  public apiV1NgonNguGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
    return CourseLanguageApiFp(this.configuration)
      .apiV1NgonNguGet(page, size, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseLanguageApi
   */
  public apiV1NgonNguIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return CourseLanguageApiFp(this.configuration)
      .apiV1NgonNguIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseLanguageApi
   */
  public apiV1NgonNguIdGet(id: string, options?: RawAxiosRequestConfig) {
    return CourseLanguageApiFp(this.configuration)
      .apiV1NgonNguIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseLanguageApi
   */
  public apiV1NgonNguIdLoaiKhoaHocGet(id: string, options?: RawAxiosRequestConfig) {
    return CourseLanguageApiFp(this.configuration)
      .apiV1NgonNguIdLoaiKhoaHocGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {UpdateCourseLanguageRequest} [updateCourseLanguageRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseLanguageApi
   */
  public apiV1NgonNguIdPut(
    id: string,
    updateCourseLanguageRequest?: UpdateCourseLanguageRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CourseLanguageApiFp(this.configuration)
      .apiV1NgonNguIdPut(id, updateCourseLanguageRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {CreateCourseLanguageRequest} [createCourseLanguageRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseLanguageApi
   */
  public apiV1NgonNguPost(createCourseLanguageRequest?: CreateCourseLanguageRequest, options?: RawAxiosRequestConfig) {
    return CourseLanguageApiFp(this.configuration)
      .apiV1NgonNguPost(createCourseLanguageRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * FeedbackApi - axios parameter creator
 * @export
 */
export const FeedbackApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanGet: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/binh-luan`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1BinhLuanIdDelete', 'id', id)
      const localVarPath = `/api/v1/binh-luan/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {CreateFeedbackRequest} [createFeedbackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanIdPost: async (
      id: string,
      createFeedbackRequest?: CreateFeedbackRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1BinhLuanIdPost', 'id', id)
      const localVarPath = `/api/v1/binh-luan/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createFeedbackRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {UpdateFeedbackRequest} [updateFeedbackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanIdPut: async (
      id: string,
      updateFeedbackRequest?: UpdateFeedbackRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1BinhLuanIdPut', 'id', id)
      const localVarPath = `/api/v1/binh-luan/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(updateFeedbackRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanPagingGet: async (
      page?: number,
      size?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/binh-luan-paging`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * FeedbackApi - functional programming interface
 * @export
 */
export const FeedbackApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FeedbackApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BinhLuanGet(
      id?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['FeedbackApi.apiV1BinhLuanGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BinhLuanIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['FeedbackApi.apiV1BinhLuanIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {CreateFeedbackRequest} [createFeedbackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BinhLuanIdPost(
      id: string,
      createFeedbackRequest?: CreateFeedbackRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanIdPost(id, createFeedbackRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['FeedbackApi.apiV1BinhLuanIdPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {UpdateFeedbackRequest} [updateFeedbackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BinhLuanIdPut(
      id: string,
      updateFeedbackRequest?: UpdateFeedbackRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanIdPut(id, updateFeedbackRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['FeedbackApi.apiV1BinhLuanIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BinhLuanPagingGet(
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BinhLuanPagingGet(page, size, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['FeedbackApi.apiV1BinhLuanPagingGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * FeedbackApi - factory interface
 * @export
 */
export const FeedbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = FeedbackApiFp(configuration)
  return {
    /**
     *
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanGet(id?: string, options?: any): AxiosPromise<CourseViewModelResult> {
      return localVarFp.apiV1BinhLuanGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1BinhLuanIdDelete(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {CreateFeedbackRequest} [createFeedbackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanIdPost(
      id: string,
      createFeedbackRequest?: CreateFeedbackRequest,
      options?: any
    ): AxiosPromise<FeedbackViewModelResult> {
      return localVarFp
        .apiV1BinhLuanIdPost(id, createFeedbackRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {UpdateFeedbackRequest} [updateFeedbackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanIdPut(
      id: string,
      updateFeedbackRequest?: UpdateFeedbackRequest,
      options?: any
    ): AxiosPromise<BooleanResult> {
      return localVarFp
        .apiV1BinhLuanIdPut(id, updateFeedbackRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BinhLuanPagingGet(page?: number, size?: number, options?: any): AxiosPromise<CourseViewModelListResult> {
      return localVarFp.apiV1BinhLuanPagingGet(page, size, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * FeedbackApi - object-oriented interface
 * @export
 * @class FeedbackApi
 * @extends {BaseAPI}
 */
export class FeedbackApi extends BaseAPI {
  /**
   *
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeedbackApi
   */
  public apiV1BinhLuanGet(id?: string, options?: RawAxiosRequestConfig) {
    return FeedbackApiFp(this.configuration)
      .apiV1BinhLuanGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeedbackApi
   */
  public apiV1BinhLuanIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return FeedbackApiFp(this.configuration)
      .apiV1BinhLuanIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {CreateFeedbackRequest} [createFeedbackRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeedbackApi
   */
  public apiV1BinhLuanIdPost(
    id: string,
    createFeedbackRequest?: CreateFeedbackRequest,
    options?: RawAxiosRequestConfig
  ) {
    return FeedbackApiFp(this.configuration)
      .apiV1BinhLuanIdPost(id, createFeedbackRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {UpdateFeedbackRequest} [updateFeedbackRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeedbackApi
   */
  public apiV1BinhLuanIdPut(
    id: string,
    updateFeedbackRequest?: UpdateFeedbackRequest,
    options?: RawAxiosRequestConfig
  ) {
    return FeedbackApiFp(this.configuration)
      .apiV1BinhLuanIdPut(id, updateFeedbackRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeedbackApi
   */
  public apiV1BinhLuanPagingGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
    return FeedbackApiFp(this.configuration)
      .apiV1BinhLuanPagingGet(page, size, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PayOsApi - axios parameter creator
 * @export
 */
export const PayOsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} paymentMethod
     * @param {number} fee
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PayOsPost: async (
      paymentMethod: string,
      fee: number,
      courseId: string,
      userId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'paymentMethod' is not null or undefined
      assertParamExists('apiV1PayOsPost', 'paymentMethod', paymentMethod)
      // verify required parameter 'fee' is not null or undefined
      assertParamExists('apiV1PayOsPost', 'fee', fee)
      // verify required parameter 'courseId' is not null or undefined
      assertParamExists('apiV1PayOsPost', 'courseId', courseId)
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('apiV1PayOsPost', 'userId', userId)
      const localVarPath = `/api/v1/PayOs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (paymentMethod !== undefined) {
        localVarQueryParameter['PaymentMethod'] = paymentMethod
      }

      if (fee !== undefined) {
        localVarQueryParameter['Fee'] = fee
      }

      if (courseId !== undefined) {
        localVarQueryParameter['CourseId'] = courseId
      }

      if (userId !== undefined) {
        localVarQueryParameter['UserId'] = userId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * PayOsApi - functional programming interface
 * @export
 */
export const PayOsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PayOsApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} paymentMethod
     * @param {number} fee
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PayOsPost(
      paymentMethod: string,
      fee: number,
      courseId: string,
      userId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PayOsPost(
        paymentMethod,
        fee,
        courseId,
        userId,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PayOsApi.apiV1PayOsPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * PayOsApi - factory interface
 * @export
 */
export const PayOsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PayOsApiFp(configuration)
  return {
    /**
     *
     * @param {string} paymentMethod
     * @param {number} fee
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PayOsPost(
      paymentMethod: string,
      fee: number,
      courseId: string,
      userId: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1PayOsPost(paymentMethod, fee, courseId, userId, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * PayOsApi - object-oriented interface
 * @export
 * @class PayOsApi
 * @extends {BaseAPI}
 */
export class PayOsApi extends BaseAPI {
  /**
   *
   * @param {string} paymentMethod
   * @param {number} fee
   * @param {string} courseId
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PayOsApi
   */
  public apiV1PayOsPost(
    paymentMethod: string,
    fee: number,
    courseId: string,
    userId: string,
    options?: RawAxiosRequestConfig
  ) {
    return PayOsApiFp(this.configuration)
      .apiV1PayOsPost(paymentMethod, fee, courseId, userId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ThanhToanGet: async (
      page?: number,
      size?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/thanh-toan`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ThanhToanIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1ThanhToanIdDelete', 'id', id)
      const localVarPath = `/api/v1/thanh-toan/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ThanhToanIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1ThanhToanIdGet', 'id', id)
      const localVarPath = `/api/v1/thanh-toan/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ThanhToanIdPut: async (
      id: string,
      body?: object,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1ThanhToanIdPut', 'id', id)
      const localVarPath = `/api/v1/thanh-toan/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ThanhToanGet(
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ThanhToanGet(page, size, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentApi.apiV1ThanhToanGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ThanhToanIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ThanhToanIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentApi.apiV1ThanhToanIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ThanhToanIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ThanhToanIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentApi.apiV1ThanhToanIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ThanhToanIdPut(
      id: string,
      body?: object,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ThanhToanIdPut(id, body, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentApi.apiV1ThanhToanIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PaymentApiFp(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ThanhToanGet(page?: number, size?: number, options?: any): AxiosPromise<PaymentViewModelListResult> {
      return localVarFp.apiV1ThanhToanGet(page, size, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ThanhToanIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1ThanhToanIdDelete(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ThanhToanIdGet(id: string, options?: any): AxiosPromise<PaymentViewModelResult> {
      return localVarFp.apiV1ThanhToanIdGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ThanhToanIdPut(id: string, body?: object, options?: any): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1ThanhToanIdPut(id, body, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentApi
   */
  public apiV1ThanhToanGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
    return PaymentApiFp(this.configuration)
      .apiV1ThanhToanGet(page, size, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentApi
   */
  public apiV1ThanhToanIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return PaymentApiFp(this.configuration)
      .apiV1ThanhToanIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentApi
   */
  public apiV1ThanhToanIdGet(id: string, options?: RawAxiosRequestConfig) {
    return PaymentApiFp(this.configuration)
      .apiV1ThanhToanIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentApi
   */
  public apiV1ThanhToanIdPut(id: string, body?: object, options?: RawAxiosRequestConfig) {
    return PaymentApiFp(this.configuration)
      .apiV1ThanhToanIdPut(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} [centerId]
     * @param {string} [courseId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NguoiHocGet: async (
      centerId?: string,
      courseId?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/nguoi-hoc`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (centerId !== undefined) {
        localVarQueryParameter['centerId'] = centerId
      }

      if (courseId !== undefined) {
        localVarQueryParameter['courseId'] = courseId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NguoiHocIdKhoaHocGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1NguoiHocIdKhoaHocGet', 'id', id)
      const localVarPath = `/api/v1/nguoi-hoc/{id}/khoa-hoc`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TrungTamIdKhoaHocGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1TrungTamIdKhoaHocGet', 'id', id)
      const localVarPath = `/api/v1/trung-tam/{id}/khoa-hoc`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1UsersIdDelete', 'id', id)
      const localVarPath = `/api/v1/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1UsersIdGet', 'id', id)
      const localVarPath = `/api/v1/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} id
     * @param {UpdateUserRequest} [updateUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersIdPut: async (
      id: string,
      updateUserRequest?: UpdateUserRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1UsersIdPut', 'id', id)
      const localVarPath = `/api/v1/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {CreateUserRequest} [createUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersPost: async (
      createUserRequest?: CreateUserRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} [centerId]
     * @param {string} [courseId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1NguoiHocGet(
      centerId?: string,
      courseId?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NguoiHocGet(centerId, courseId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.apiV1NguoiHocGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1NguoiHocIdKhoaHocGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDtoListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NguoiHocIdKhoaHocGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.apiV1NguoiHocIdKhoaHocGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TrungTamIdKhoaHocGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TrungTamIdKhoaHocGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.apiV1TrungTamIdKhoaHocGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersGet(
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersGet(page, size, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.apiV1UsersGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.apiV1UsersIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserViewModelListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.apiV1UsersIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} id
     * @param {UpdateUserRequest} [updateUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersIdPut(
      id: string,
      updateUserRequest?: UpdateUserRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersIdPut(id, updateUserRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.apiV1UsersIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {CreateUserRequest} [createUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersPost(
      createUserRequest?: CreateUserRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserViewModelResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersPost(createUserRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.apiV1UsersPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UserApiFp(configuration)
  return {
    /**
     *
     * @param {string} [centerId]
     * @param {string} [courseId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NguoiHocGet(centerId?: string, courseId?: string, options?: any): AxiosPromise<CourseViewModelListResult> {
      return localVarFp.apiV1NguoiHocGet(centerId, courseId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NguoiHocIdKhoaHocGet(id: string, options?: any): AxiosPromise<CourseDtoListResult> {
      return localVarFp.apiV1NguoiHocIdKhoaHocGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TrungTamIdKhoaHocGet(id: string, options?: any): AxiosPromise<CourseViewModelListResult> {
      return localVarFp.apiV1TrungTamIdKhoaHocGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersGet(page?: number, size?: number, options?: any): AxiosPromise<UserViewModelListResult> {
      return localVarFp.apiV1UsersGet(page, size, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersIdDelete(id: string, options?: any): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1UsersIdDelete(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersIdGet(id: string, options?: any): AxiosPromise<UserViewModelListResult> {
      return localVarFp.apiV1UsersIdGet(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {UpdateUserRequest} [updateUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersIdPut(id: string, updateUserRequest?: UpdateUserRequest, options?: any): AxiosPromise<BooleanResult> {
      return localVarFp.apiV1UsersIdPut(id, updateUserRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {CreateUserRequest} [createUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersPost(createUserRequest?: CreateUserRequest, options?: any): AxiosPromise<UserViewModelResult> {
      return localVarFp.apiV1UsersPost(createUserRequest, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @param {string} [centerId]
   * @param {string} [courseId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1NguoiHocGet(centerId?: string, courseId?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1NguoiHocGet(centerId, courseId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1NguoiHocIdKhoaHocGet(id: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1NguoiHocIdKhoaHocGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1TrungTamIdKhoaHocGet(id: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1TrungTamIdKhoaHocGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1UsersGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1UsersGet(page, size, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1UsersIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1UsersIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1UsersIdGet(id: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1UsersIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {UpdateUserRequest} [updateUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1UsersIdPut(id: string, updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1UsersIdPut(id, updateUserRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {CreateUserRequest} [createUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1UsersPost(createUserRequest?: CreateUserRequest, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1UsersPost(createUserRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserCourseApi - axios parameter creator
 * @export
 */
export const UserCourseApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} paymentMethod
     * @param {number} fee
     * @param {string} courseId
     * @param {string} userId
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UserCourseJoinPost: async (
      paymentMethod: string,
      fee: number,
      courseId: string,
      userId: string,
      status?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'paymentMethod' is not null or undefined
      assertParamExists('apiV1UserCourseJoinPost', 'paymentMethod', paymentMethod)
      // verify required parameter 'fee' is not null or undefined
      assertParamExists('apiV1UserCourseJoinPost', 'fee', fee)
      // verify required parameter 'courseId' is not null or undefined
      assertParamExists('apiV1UserCourseJoinPost', 'courseId', courseId)
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('apiV1UserCourseJoinPost', 'userId', userId)
      const localVarPath = `/api/v1/UserCourse/join`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (paymentMethod !== undefined) {
        localVarQueryParameter['PaymentMethod'] = paymentMethod
      }

      if (fee !== undefined) {
        localVarQueryParameter['Fee'] = fee
      }

      if (courseId !== undefined) {
        localVarQueryParameter['CourseId'] = courseId
      }

      if (userId !== undefined) {
        localVarQueryParameter['UserId'] = userId
      }

      if (status !== undefined) {
        localVarQueryParameter['status'] = status
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * UserCourseApi - functional programming interface
 * @export
 */
export const UserCourseApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserCourseApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} paymentMethod
     * @param {number} fee
     * @param {string} courseId
     * @param {string} userId
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UserCourseJoinPost(
      paymentMethod: string,
      fee: number,
      courseId: string,
      userId: string,
      status?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserCourseJoinPost(
        paymentMethod,
        fee,
        courseId,
        userId,
        status,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserCourseApi.apiV1UserCourseJoinPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * UserCourseApi - factory interface
 * @export
 */
export const UserCourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UserCourseApiFp(configuration)
  return {
    /**
     *
     * @param {string} paymentMethod
     * @param {number} fee
     * @param {string} courseId
     * @param {string} userId
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UserCourseJoinPost(
      paymentMethod: string,
      fee: number,
      courseId: string,
      userId: string,
      status?: string,
      options?: any
    ): AxiosPromise<BooleanResult> {
      return localVarFp
        .apiV1UserCourseJoinPost(paymentMethod, fee, courseId, userId, status, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * UserCourseApi - object-oriented interface
 * @export
 * @class UserCourseApi
 * @extends {BaseAPI}
 */
export class UserCourseApi extends BaseAPI {
  /**
   *
   * @param {string} paymentMethod
   * @param {number} fee
   * @param {string} courseId
   * @param {string} userId
   * @param {string} [status]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApi
   */
  public apiV1UserCourseJoinPost(
    paymentMethod: string,
    fee: number,
    courseId: string,
    userId: string,
    status?: string,
    options?: RawAxiosRequestConfig
  ) {
    return UserCourseApiFp(this.configuration)
      .apiV1UserCourseJoinPost(paymentMethod, fee, courseId, userId, status, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
